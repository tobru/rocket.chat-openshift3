{"version":3,"sources":["meteor://ðŸ’»app/server/publications/subscription.coffee"],"names":[],"mappings":";;;;;;;;;AAAA;EAAA;;AAAA,SACC;AAAA,KAAG,CAAH;AAAA,EACA,IAAI,CADJ;AAAA,EAEA,IAAI,CAFJ;AAAA,EAGA,MAAM,CAHN;AAAA,EAIA,KAAK,CAJL;AAAA,EAKA,MAAM,CALN;AAAA,EAMA,GAAG,CANH;AAAA,EAOA,GAAG,CAPH;AAAA,EAQA,MAAM,CARN;AAAA,EASA,OAAO,CATP;AAAA,EAUA,OAAO,CAVP;AAAA,EAWA,QAAQ,CAXR;AAAA,EAYA,UAAU,CAZV;AAAA,EAaA,sBAAsB,CAbtB;AAAA,EAcA,6BAA6B,CAd7B;AAAA,EAeA,yBAAyB,CAfzB;AAAA,EAgBA,oBAAoB,CAhBpB;AAAA,EAiBA,YAAY,CAjBZ;CADD;;AAAA,MAqBM,CAAC,OAAP,CACC;AAAA,uBAAqB;AACpB;AAAA,eAAa,CAAC,MAAP,EAAP;AACC,aAAO,EAAP,CADD;KAAA;AAAA,IAGA,IAAI,CAAC,OAAL,EAHA;AAAA,IAKA,UACC;AAAA,cAAQ,MAAR;KAND;AAQA,WAAO,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,YAAhC,CAA6C,MAAM,CAAC,MAAP,EAA7C,EAA8D,OAA9D,CAAsE,CAAC,KAAvE,EAAP,CAToB;EAAA,CAArB;AAAA,EAWA,sBAAsB,SAAC,SAAD;AACrB;AAAA,eAAa,CAAC,MAAP,EAAP;AACC,aAAO,EAAP,CADD;KAAA;AAAA,IAGA,IAAI,CAAC,OAAL,EAHA;AAAA,IAKA,UACC;AAAA,cAAQ,MAAR;KAND;AAQA,WAAO,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,uBAAhC,CAAwD,cAAxD,EAAwE,SAAxE,EAAmF,MAAM,CAAC,MAAP,EAAnF,EAAoG,OAApG,CAAP,CATqB;EAAA,CAXtB;CADD,CArBA;;AAAA,UA6CU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAhC,CAAmC,QAAnC,EAA6C;AAC5C;AAAA,EAD6C,qBAAM,4DACnD;AAAA,YAAU,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAhC,CAAkD,IAAlD,EAAwD,IAAK,GAA7D,EAAiE,MAAjE,CAAV;AAEA;OAAA;wBAAA;AACC,2BAAU,CAAC,aAAa,CAAC,UAAzB,CAAoC,MAAM,CAAC,CAAC,CAAC,GAA7C,EAAkD,uBAAlD,EAA2E,IAA3E,EAAiF,MAAjF,GADD;AAAA;iBAH4C;AAAA,CAA7C,CA7CA","file":"/server/publications/subscription.coffee.js","sourcesContent":["fields =\n\tt: 1\n\tts: 1\n\tls: 1\n\tname: 1\n\trid: 1\n\tcode: 1\n\tf: 1\n\tu: 1\n\topen: 1\n\talert: 1\n\troles: 1\n\tunread: 1\n\tarchived: 1\n\tdesktopNotifications: 1\n\tdesktopNotificationDuration: 1\n\tmobilePushNotifications: 1\n\temailNotifications: 1\n\t_updatedAt: 1\n\n\nMeteor.methods\n\t'subscriptions/get': ->\n\t\tunless Meteor.userId()\n\t\t\treturn []\n\n\t\tthis.unblock()\n\n\t\toptions =\n\t\t\tfields: fields\n\n\t\treturn RocketChat.models.Subscriptions.findByUserId(Meteor.userId(), options).fetch()\n\n\t'subscriptions/sync': (updatedAt) ->\n\t\tunless Meteor.userId()\n\t\t\treturn {}\n\n\t\tthis.unblock()\n\n\t\toptions =\n\t\t\tfields: fields\n\n\t\treturn RocketChat.models.Subscriptions.dinamicFindChangesAfter('findByUserId', updatedAt, Meteor.userId(), options);\n\n\nRocketChat.models.Subscriptions.on 'change', (type, args...) ->\n\trecords = RocketChat.models.Subscriptions.getChangedRecords type, args[0], fields\n\n\tfor record in records\n\t\tRocketChat.Notifications.notifyUser record.u._id, 'subscriptions-changed', type, record\n"]}