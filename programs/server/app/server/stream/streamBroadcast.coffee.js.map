{"version":3,"sources":["meteor://ðŸ’»app/server/stream/streamBroadcast.coffee"],"names":[],"mappings":"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","file":"/server/stream/streamBroadcast.coffee.js","sourcesContent":["logger = new Logger 'StreamBroadcast',\n\tsections:\n\t\tconnection: 'Connection'\n\t\tauth: 'Auth'\n\t\tstream: 'Stream'\n\nauthorizeConnection = (instance) ->\n\tlogger.auth.info \"Authorizing with #{instance}\"\n\tconnections[instance].call 'broadcastAuth', connections[instance].instanceRecord._id, InstanceStatus.id(), (err, ok) ->\n\t\tconnections[instance].broadcastAuth = ok\n\t\tlogger.auth.info \"broadcastAuth with #{instance}\", ok\n\n@connections = {}\n@startStreamBroadcast = () ->\n\tlogger.info 'startStreamBroadcast'\n\n\tInstanceStatus.getCollection().find({'extraInformation.port': {$exists: true}}, {sort: {_createdAt: -1}}).observe\n\t\tadded: (record) ->\n\t\t\tif record.extraInformation.port is process.env.PORT and (record.extraInformation.host is 'localhost' or record.extraInformation.host is process.env.INSTANCE_IP)\n\t\t\t\treturn\n\n\t\t\tinstance = record.extraInformation.host + ':' + record.extraInformation.port\n\n\t\t\tif connections[instance]?.instanceRecord?\n\t\t\t\tif connections[instance].instanceRecord._createdAt < record._createdAt\n\t\t\t\t\tconnections[instance].disconnect()\n\t\t\t\t\tdelete connections[instance]\n\t\t\t\telse\n\t\t\t\t\treturn\n\n\t\t\tlogger.connection.info 'connecting in', instance\n\t\t\tconnections[instance] = DDP.connect(instance, {_dontPrintErrors: true})\n\t\t\tconnections[instance].instanceRecord = record;\n\t\t\tauthorizeConnection(instance);\n\t\t\tconnections[instance].onReconnect = ->\n\t\t\t\tauthorizeConnection(instance);\n\n\t\tremoved: (record) ->\n\t\t\tinstance = record.extraInformation.host + ':' + record.extraInformation.port\n\t\t\tif connections[instance]? and not InstanceStatus.getCollection().findOne({'extraInformation.host': record.extraInformation.host, 'extraInformation.port': record.extraInformation.port})?\n\t\t\t\tlogger.connection.info 'disconnecting from', instance\n\t\t\t\tconnections[instance].disconnect()\n\t\t\t\tdelete connections[instance]\n\n\tbroadcast = (streamName, eventName, args, userId) ->\n\t\tfromInstance = (process.env.INSTANCE_IP or 'localhost') + ':' + process.env.PORT\n\t\tfor instance, connection of connections\n\t\t\tdo (instance, connection) ->\n\t\t\t\tif connection.status().connected is true\n\t\t\t\t\tconnection.call 'stream', streamName, eventName, args, (error, response) ->\n\t\t\t\t\t\tif error?\n\t\t\t\t\t\t\tlogger.error \"Stream broadcast error\", error\n\n\t\t\t\t\t\tswitch response\n\t\t\t\t\t\t\twhen 'self-not-authorized'\n\t\t\t\t\t\t\t\tlogger.stream.error \"Stream broadcast from '#{fromInstance}' to '#{connection._stream.endpoint}' with name #{streamName} to self is not authorized\".red\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> connection authorized\".red, connection.broadcastAuth\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> connection status\".red, connection.status()\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> arguments\".red, eventName, args\n\n\t\t\t\t\t\t\twhen 'not-authorized'\n\t\t\t\t\t\t\t\tlogger.stream.error \"Stream broadcast from '#{fromInstance}' to '#{connection._stream.endpoint}' with name #{streamName} not authorized\".red\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> connection authorized\".red, connection.broadcastAuth\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> connection status\".red, connection.status()\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> arguments\".red, eventName, args\n\t\t\t\t\t\t\t\tauthorizeConnection(instance);\n\n\t\t\t\t\t\t\twhen 'stream-not-exists'\n\t\t\t\t\t\t\t\tlogger.stream.error \"Stream broadcast from '#{fromInstance}' to '#{connection._stream.endpoint}' with name #{streamName} does not exist\".red\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> connection authorized\".red, connection.broadcastAuth\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> connection status\".red, connection.status()\n\t\t\t\t\t\t\t\tlogger.stream.debug \"    -> arguments\".red, eventName, args\n\n\tMeteor.StreamerCentral.on 'broadcast', (streamName, eventName, args) ->\n\t\tbroadcast streamName, eventName, args\n\n\tMeteor.methods\n\t\tbroadcastAuth: (selfId, remoteId) ->\n\t\t\tcheck selfId, String\n\t\t\tcheck remoteId, String\n\n\t\t\t@unblock()\n\t\t\tif selfId is InstanceStatus.id() and remoteId isnt InstanceStatus.id() and InstanceStatus.getCollection().findOne({_id: remoteId})?\n\t\t\t\t@connection.broadcastAuth = true\n\n\t\t\treturn @connection.broadcastAuth is true\n\n\t\tstream: (streamName, eventName, args) ->\n\t\t\t# Prevent call from self and client\n\t\t\tif not @connection?\n\t\t\t\treturn 'self-not-authorized'\n\n\t\t\t# Prevent call from unauthrorized connections\n\t\t\tif @connection.broadcastAuth isnt true\n\t\t\t\treturn 'not-authorized'\n\n\t\t\tif not Meteor.StreamerCentral.instances[streamName]?\n\t\t\t\treturn 'stream-not-exists'\n\n\t\t\tMeteor.StreamerCentral.instances[streamName]._emit(eventName, args)\n\n\t\t\treturn undefined\n\nMeteor.startup ->\n\tstartStreamBroadcast()\n"]}