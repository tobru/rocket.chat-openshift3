{"version":3,"sources":["meteor://ðŸ’»app/server/methods/groupsList.js"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,CAAC,OAAO,CAAC;AACd,WAAU,EAAE,UAAS,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE;AAC7C,MAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE;AACrB,SAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;GACvF;;AAED,MAAI,OAAO,GAAG;AACb,SAAM,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;AACnB,OAAI,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;GACjB,CAAC;;;AAGF,MAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACtB,UAAO,CAAC,KAAK,GAAG,KAAK,CAAC;GACtB;;;AAGD,MAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AACjB,WAAQ,IAAI;AACX,SAAK,MAAM;AACV,YAAO,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;AAC3B,WAAM;AACP,SAAK,MAAM;AACV,YAAO,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;AAC5B,WAAM;AAAA,IACP;GACD;;;AAGD,MAAI,UAAU,EAAE;AACf,UAAO,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC;GAClL,MAAM;AACN,OAAI,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC;AAChH,UAAO,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC;GAC/E;EACD;CACD,CAAC,CAAC,sE","file":"/server/methods/groupsList.js","sourcesContent":["Meteor.methods({\n\tgroupsList: function(nameFilter, limit, sort) {\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'groupsList' });\n\t\t}\n\n\t\tlet options = {\n\t\t\tfields: { name: 1 },\n\t\t\tsort: { name: 1 }\n\t\t};\n\n\t\t//Verify the limit param is a number\n\t\tif (_.isNumber(limit)) {\n\t\t\toptions.limit = limit;\n\t\t}\n\n\t\t//Verify there is a sort option and it's a string\n\t\tif (_.trim(sort)) {\n\t\t\tswitch (sort) {\n\t\t\t\tcase 'name':\n\t\t\t\t\toptions.sort = { name: 1 };\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'msgs':\n\t\t\t\t\toptions.sort = { msgs: -1 };\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t//Determine if they are searching or not, base it upon the name field\n\t\tif (nameFilter) {\n\t\t\treturn { groups: RocketChat.models.Rooms.findByTypeAndNameContainingUsername('p', new RegExp(s.trim(s.escapeRegExp(nameFilter)), 'i'), Meteor.user().username, options).fetch() };\n\t\t} else {\n\t\t\tlet roomIds = _.pluck(RocketChat.models.Subscriptions.findByTypeAndUserId('p', Meteor.userId()).fetch(), 'rid');\n\t\t\treturn { groups: RocketChat.models.Rooms.findByIds(roomIds, options).fetch() };\n\t\t}\n\t}\n});\n"]}