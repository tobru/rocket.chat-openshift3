{"version":3,"sources":["meteor://ðŸ’»app/packages/konecty_user-presence/common/common.js","meteor://ðŸ’»app/packages/konecty_user-presence/server/server.js","meteor://ðŸ’»app/packages/konecty_user-presence/server/monitor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,0H;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/konecty_user-presence.js","sourcesContent":["UsersSessions = new Meteor.Collection('usersSessions');","UsersSessions._ensureIndex({'connections.instanceId': 1}, {sparse: 1, name: 'connections.instanceId'});\nUsersSessions._ensureIndex({'connections.id': 1}, {sparse: 1, name: 'connections.id'});\n\nvar allowedStatus = ['online', 'away', 'busy', 'offline'];\n\nvar logEnable = false;\n\nvar log = function(msg, color) {\n\tif (logEnable) {\n\t\tif (color) {\n\t\t\tconsole.log(msg[color]);\n\t\t} else {\n\t\t\tconsole.log(msg);\n\t\t}\n\t}\n};\n\nvar logRed    = function() {log(Array.prototype.slice.call(arguments).join(' '), 'red');};\nvar logGrey   = function() {log(Array.prototype.slice.call(arguments).join(' '), 'grey');};\nvar logGreen  = function() {log(Array.prototype.slice.call(arguments).join(' '), 'green');};\nvar logYellow = function() {log(Array.prototype.slice.call(arguments).join(' '), 'yellow');};\n\nUserPresence = {\n\tactiveLogs: function() {\n\t\tlogEnable = true;\n\t},\n\n\tremoveLostConnections: function() {\n\t\tif (Package['konecty:multiple-instances-status']) {\n\t\t\tvar ids = InstanceStatus.getCollection().find({}, {fields: {_id: 1}}).fetch();\n\n\t\t\tids = ids.map(function(id) {\n\t\t\t\treturn id._id;\n\t\t\t});\n\n\t\t\tvar update = {\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId: {\n\t\t\t\t\t\t\t$nin: ids\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tUsersSessions.update({}, update, {multi: true});\n\t\t} else {\n\t\t\tUsersSessions.remove({});\n\t\t}\n\t},\n\n\tremoveConnectionsByInstanceId: function(instanceId) {\n\t\tlogRed('[user-presence] removeConnectionsByInstanceId', instanceId);\n\t\tvar update = {\n\t\t\t$pull: {\n\t\t\t\tconnections: {\n\t\t\t\t\tinstanceId: instanceId\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tUsersSessions.update({}, update, {multi: true});\n\t},\n\n\tremoveAllConnections: function() {\n\t\tlogRed('[user-presence] removeAllConnections');\n\t\tUsersSessions.remove({});\n\t},\n\n\tstartObserveForDeletedServers: function() {\n\t\tInstanceStatus.getCollection().find({}, {fields: {_id: 1}}).observeChanges({\n\t\t\tremoved: function(id) {\n\t\t\t\tUserPresence.removeConnectionsByInstanceId(id);\n\t\t\t}\n\t\t});\n\t},\n\n\tcreateConnection: function(userId, connection, status, visitor) {\n\t\tif (!userId) {\n\t\t\treturn;\n\t\t};\n\n\t\tconnection.UserPresenceUserId = userId;\n\n\t\tstatus = status || 'online';\n\n\t\tlogGreen('[user-presence] createConnection', userId, connection.id, visitor === true ? 'visitor' : 'user');\n\n\t\tvar query = {\n\t\t\t_id: userId\n\t\t};\n\n\t\tvar now = new Date();\n\n\t\tvar instanceId = undefined;\n\t\tif (Package['konecty:multiple-instances-status']) {\n\t\t\tinstanceId = InstanceStatus.id();\n\t\t};\n\n\t\tvar update = {\n\t\t\t$set: {\n\t\t\t\tvisitor: visitor === true\n\t\t\t},\n\t\t\t$push: {\n\t\t\t\tconnections: {\n\t\t\t\t\tid: connection.id,\n\t\t\t\t\tinstanceId: instanceId,\n\t\t\t\t\tstatus: status,\n\t\t\t\t\t_createdAt: now,\n\t\t\t\t\t_updatedAt: now\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tUsersSessions.upsert(query, update);\n\t},\n\n\tsetConnection: function(userId, connection, status, visitor) {\n\t\tif (!userId) {\n\t\t\treturn;\n\t\t};\n\n\t\tlogGrey('[user-presence] setConnection', userId, connection.id, status, visitor === true ? 'visitor' : 'user');\n\n\t\tvar query = {\n\t\t\t_id: userId,\n\t\t\t'connections.id': connection.id\n\t\t};\n\n\t\tvar now = new Date();\n\n\t\tvar update = {\n\t\t\t$set: {\n\t\t\t\t'connections.$.status': status,\n\t\t\t\t'connections.$._updatedAt': now\n\t\t\t}\n\t\t};\n\n\t\tvar count = UsersSessions.update(query, update);\n\n\t\tif (count === 0) {\n\t\t\tUserPresence.createConnection(userId, connection, status, visitor);\n\t\t};\n\n\t\tif (visitor !== true) {\n\t\t\tif (status === 'online') {\n\t\t\t\tMeteor.users.update({_id: userId, statusDefault: 'online', status: {$ne: 'online'}}, {$set: {status: 'online'}});\n\t\t\t} else if (status === 'away') {\n\t\t\t\tMeteor.users.update({_id: userId, statusDefault: 'online', status: {$ne: 'away'}}, {$set: {status: 'away'}});\n\t\t\t}\n\t\t}\n\t},\n\n\tsetDefaultStatus: function(userId, status) {\n\t\tif (!userId) {\n\t\t\treturn;\n\t\t};\n\n\t\tif (allowedStatus.indexOf(status) === -1) {\n\t\t\treturn;\n\t\t};\n\n\t\tlogYellow('[user-presence] setDefaultStatus', userId, status);\n\n\t\tvar update = Meteor.users.update({_id: userId, statusDefault: {$ne: status}}, {$set: {statusDefault: status}});\n\n\t\tif (update > 0) {\n\t\t\tUserPresenceMonitor.processUser(userId, { statusDefault: status });\n\t\t}\n\t},\n\n\tremoveConnection: function(connectionId) {\n\t\tlogRed('[user-presence] removeConnection', connectionId);\n\n\t\tvar query = {\n\t\t\t'connections.id': connectionId\n\t\t};\n\n\t\tvar update = {\n\t\t\t$pull: {\n\t\t\t\tconnections: {\n\t\t\t\t\tid: connectionId\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tUsersSessions.update(query, update);\n\t},\n\n\tstart: function() {\n\t\tMeteor.onConnection(function(connection) {\n\t\t\tconnection.onClose(function() {\n\t\t\t\tif (connection.UserPresenceUserId != undefined) {\n\t\t\t\t\tUserPresence.removeConnection(connection.id);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tprocess.on('exit', function() {\n\t\t\tif (Package['konecty:multiple-instances-status']) {\n\t\t\t\tUserPresence.removeConnectionsByInstanceId(InstanceStatus.id());\n\t\t\t} else {\n\t\t\t\tUserPresence.removeAllConnections();\n\t\t\t}\n\t\t});\n\n\t\tif (Package['accounts-base']) {\n\t\t\tAccounts.onLogin(function(login) {\n\t\t\t\tUserPresence.createConnection(login.user._id, login.connection);\n\t\t\t});\n\t\t};\n\n\t\tMeteor.publish(null, function() {\n\t\t\tif (this.userId == null && this.connection.UserPresenceUserId != undefined) {\n\t\t\t\tUserPresence.removeConnection(this.connection.id);\n\t\t\t\tdelete this.connection.UserPresenceUserId;\n\t\t\t}\n\n\t\t\tthis.ready();\n\t\t});\n\n\t\tif (Package['konecty:multiple-instances-status']) {\n\t\t\tUserPresence.startObserveForDeletedServers();\n\t\t}\n\n\t\tUserPresence.removeLostConnections();\n\n\t\tMeteor.methods({\n\t\t\t'UserPresence:connect': function() {\n\t\t\t\tthis.unblock();\n\t\t\t\tUserPresence.createConnection(this.userId, this.connection);\n\t\t\t},\n\n\t\t\t'UserPresence:away': function() {\n\t\t\t\tthis.unblock();\n\t\t\t\tUserPresence.setConnection(this.userId, this.connection, 'away');\n\t\t\t},\n\n\t\t\t'UserPresence:online': function() {\n\t\t\t\tthis.unblock();\n\t\t\t\tUserPresence.setConnection(this.userId, this.connection, 'online');\n\t\t\t},\n\n\t\t\t'UserPresence:setDefaultStatus': function(status) {\n\t\t\t\tthis.unblock();\n\t\t\t\tUserPresence.setDefaultStatus(this.userId, status);\n\t\t\t},\n\n\t\t\t'UserPresence:visitor:connect': function(id) {\n\t\t\t\tthis.unblock();\n\t\t\t\tUserPresence.createConnection(id, this.connection, 'online', true);\n\t\t\t}\n\t\t});\n\t}\n}\n","UserPresenceMonitor = {\n\tcallbacks: [],\n\n\t/**\n\t * The callback will receive the following parameters: user, status, statusConnection\n\t */\n\tonSetUserStatus: function(callback) {\n\t\tthis.callbacks.push(callback);\n\t},\n\n\trunCallbacks: function(user, status, statusConnection) {\n\t\tthis.callbacks.forEach(function(callback) {\n\t\t\tcallback.call(null, user, status, statusConnection);\n\t\t})\n\t},\n\n\tstart: function() {\n\t\tUsersSessions.find({}).observe({\n\t\t\tadded: function(record) {\n\t\t\t\tUserPresenceMonitor.processUserSession(record, 'added');\n\t\t\t},\n\t\t\tchanged: function(record) {\n\t\t\t\tUserPresenceMonitor.processUserSession(record, 'changed');\n\t\t\t},\n\t\t\tremoved: function(record) {\n\t\t\t\tUserPresenceMonitor.processUserSession(record, 'removed');\n\t\t\t}\n\t\t});\n\t},\n\n\tprocessUserSession: function(record, action) {\n\t\tif (action === 'removed' && (record.connections == null || record.connections.length === 0)) {\n\t\t\treturn;\n\t\t};\n\n\t\tif (record.connections == null || record.connections.length === 0 || action === 'removed') {\n\t\t\tif (record.visitor === true) {\n\t\t\t\tUserPresenceMonitor.setVisitorStatus(record._id, 'offline');\n\t\t\t} else {\n\t\t\t\tUserPresenceMonitor.setUserStatus(record._id, 'offline');\n\t\t\t}\n\n\t\t\tif (action !== 'removed') {\n\t\t\t\tUsersSessions.remove({_id: record._id, 'connections.0': {$exists: false} });\n\t\t\t};\n\t\t\treturn;\n\t\t};\n\n\t\tvar connectionStatus = 'offline';\n\t\trecord.connections.forEach(function(connection) {\n\t\t\tif (connection.status === 'online') {\n\t\t\t\tconnectionStatus = 'online';\n\t\t\t} else if (connection.status === 'away' && connectionStatus === 'offline') {\n\t\t\t\tconnectionStatus = 'away';\n\t\t\t};\n\t\t});\n\n\t\tif (record.visitor === true) {\n\t\t\tUserPresenceMonitor.setVisitorStatus(record._id, connectionStatus);\n\t\t} else {\n\t\t\tUserPresenceMonitor.setUserStatus(record._id, connectionStatus);\n\t\t};\n\t},\n\n\tprocessUser: function(id, fields) {\n\t\tif (fields.statusDefault == null) {\n\t\t\treturn;\n\t\t};\n\n\t\tvar userSession = UsersSessions.findOne({_id: id});\n\n\t\tif (userSession) {\n\t\t\tUserPresenceMonitor.processUserSession(userSession, 'changed');\n\t\t};\n\t},\n\n\tsetUserStatus: function(userId, status) {\n\t\tvar user = Meteor.users.findOne(userId),\n\t\t\tstatusConnection = status;\n\n\t\tif (!user) {\n\t\t\treturn;\n\t\t};\n\n\t\tif (user.statusDefault != null && status !== 'offline' && user.statusDefault !== 'online') {\n\t\t\tstatus = user.statusDefault;\n\t\t};\n\n\t\tvar query = {\n\t\t\t_id: userId,\n\t\t\t$or: [\n\t\t\t\t{status: {$ne: status}},\n\t\t\t\t{statusConnection: {$ne: statusConnection}}\n\t\t\t]\n\t\t};\n\n\t\tvar update = {\n\t\t\t$set: {\n\t\t\t\tstatus: status,\n\t\t\t\tstatusConnection: statusConnection\n\t\t\t}\n\t\t};\n\n\t\tMeteor.users.update(query, update);\n\n\t\tthis.runCallbacks(user, status, statusConnection);\n\t},\n\n\tsetVisitorStatus: function(id, status) {}\n}\n"]}