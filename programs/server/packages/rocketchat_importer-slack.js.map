{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_importer-slack/server.coffee","meteor://ðŸ’»app/packages/rocketchat_importer-slack/main.coffee"],"names":[],"mappings":"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","file":"/packages/rocketchat_importer-slack.js","sourcesContent":["Importer.Slack = class Importer.Slack extends Importer.Base\n\tconstructor: (name, descriptionI18N, fileTypeRegex) ->\n\t\tsuper(name, descriptionI18N, fileTypeRegex)\n\t\t@userTags = []\n\t\t@bots = {}\n\t\t@logger.debug('Constructed a new Slack Importer.')\n\n\tprepare: (dataURI, sentContentType, fileName) =>\n\t\tsuper(dataURI, sentContentType, fileName)\n\n\t\t{image, contentType} = RocketChatFile.dataURIParse dataURI\n\t\tzip = new @AdmZip(new Buffer(image, 'base64'))\n\t\tzipEntries = zip.getEntries()\n\n\t\ttempChannels = []\n\t\ttempUsers = []\n\t\ttempMessages = {}\n\t\tfor entry in zipEntries\n\t\t\tdo (entry) =>\n\t\t\t\tif entry.entryName.indexOf('__MACOSX') > -1\n\t\t\t\t\t#ignore all of the files inside of __MACOSX\n\t\t\t\t\t@logger.debug(\"Ignoring the file: #{entry.entryName}\")\n\t\t\t\telse if entry.entryName == 'channels.json'\n\t\t\t\t\t@updateProgress Importer.ProgressStep.PREPARING_CHANNELS\n\t\t\t\t\ttempChannels = JSON.parse entry.getData().toString()\n\t\t\t\t\ttempChannels = tempChannels.filter (channel) -> channel.creator?\n\t\t\t\telse if entry.entryName == 'users.json'\n\t\t\t\t\t@updateProgress Importer.ProgressStep.PREPARING_USERS\n\t\t\t\t\ttempUsers = JSON.parse entry.getData().toString()\n\n\t\t\t\t\tfor user in tempUsers when user.is_bot\n\t\t\t\t\t\t@bots[user.profile.bot_id] = user\n\n\t\t\t\telse if not entry.isDirectory and entry.entryName.indexOf('/') > -1\n\t\t\t\t\titem = entry.entryName.split('/') #random/2015-10-04.json\n\t\t\t\t\tchannelName = item[0] #random\n\t\t\t\t\tmsgGroupData = item[1].split('.')[0] #2015-10-04\n\t\t\t\t\tif not tempMessages[channelName]\n\t\t\t\t\t\ttempMessages[channelName] = {}\n\t\t\t\t\t# Catch files which aren't valid JSON files, ignore them\n\t\t\t\t\ttry\n\t\t\t\t\t\ttempMessages[channelName][msgGroupData] = JSON.parse entry.getData().toString()\n\t\t\t\t\tcatch\n\t\t\t\t\t\t@logger.warn \"#{entry.entryName} is not a valid JSON file! Unable to import it.\"\n\n\t\t# Insert the users record, eventually this might have to be split into several ones as well\n\t\t# if someone tries to import a several thousands users instance\n\t\tusersId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'users', 'users': tempUsers }\n\t\t@users = @collection.findOne usersId\n\t\t@updateRecord { 'count.users': tempUsers.length }\n\t\t@addCountToTotal tempUsers.length\n\n\t\t# Insert the channels records.\n\t\tchannelsId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'channels', 'channels': tempChannels }\n\t\t@channels = @collection.findOne channelsId\n\t\t@updateRecord { 'count.channels': tempChannels.length }\n\t\t@addCountToTotal tempChannels.length\n\n\t\t# Insert the messages records\n\t\t@updateProgress Importer.ProgressStep.PREPARING_MESSAGES\n\t\tmessagesCount = 0\n\t\tfor channel, messagesObj of tempMessages\n\t\t\tdo (channel, messagesObj) =>\n\t\t\t\tif not @messages[channel]\n\t\t\t\t\t@messages[channel] = {}\n\t\t\t\tfor date, msgs of messagesObj\n\t\t\t\t\tmessagesCount += msgs.length\n\t\t\t\t\t@updateRecord { 'messagesstatus': \"#{channel}/#{date}\" }\n\n\t\t\t\t\tif Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize\n\t\t\t\t\t\tfor splitMsg, i in Importer.Base.getBSONSafeArraysFromAnArray(msgs)\n\t\t\t\t\t\t\tmessagesId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'messages', 'name': \"#{channel}/#{date}.#{i}\", 'messages': splitMsg }\n\t\t\t\t\t\t\t@messages[channel][\"#{date}.#{i}\"] = @collection.findOne messagesId\n\t\t\t\t\telse\n\t\t\t\t\t\tmessagesId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'messages', 'name': \"#{channel}/#{date}\", 'messages': msgs }\n\t\t\t\t\t\t@messages[channel][date] = @collection.findOne messagesId\n\n\t\t@updateRecord { 'count.messages': messagesCount, 'messagesstatus': null }\n\t\t@addCountToTotal messagesCount\n\n\t\tif tempUsers.length is 0 or tempChannels.length is 0 or messagesCount is 0\n\t\t\t@logger.warn \"The loaded users count #{tempUsers.length}, the loaded channels #{tempChannels.length}, and the loaded messages #{messagesCount}\"\n\t\t\t@updateProgress Importer.ProgressStep.ERROR\n\t\t\treturn @getProgress()\n\n\t\tselectionUsers = tempUsers.map (user) ->\n\t\t\treturn new Importer.SelectionUser user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot\n\t\tselectionChannels = tempChannels.map (channel) ->\n\t\t\treturn new Importer.SelectionChannel channel.id, channel.name, channel.is_archived, true\n\n\t\t@updateProgress Importer.ProgressStep.USER_SELECTION\n\t\treturn new Importer.Selection @name, selectionUsers, selectionChannels\n\n\tstartImport: (importSelection) =>\n\t\tsuper(importSelection)\n\t\tstart = Date.now()\n\n\t\tfor user in importSelection.users\n\t\t\tfor u in @users.users when u.id is user.user_id\n\t\t\t\tu.do_import = user.do_import\n\t\t@collection.update { _id: @users._id }, { $set: { 'users': @users.users }}\n\n\t\tfor channel in importSelection.channels\n\t\t\tfor c in @channels.channels when c.id is channel.channel_id\n\t\t\t\tc.do_import = channel.do_import\n\t\t@collection.update { _id: @channels._id }, { $set: { 'channels': @channels.channels }}\n\n\t\tstartedByUserId = Meteor.userId()\n\t\tMeteor.defer =>\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_USERS\n\t\t\tfor user in @users.users when user.do_import\n\t\t\t\tdo (user) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByEmailAddress user.profile.email\n\t\t\t\t\t\tif not existantUser\n\t\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername user.name\n\n\t\t\t\t\t\tif existantUser\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id\n\t\t\t\t\t\t\tRocketChat.models.Users.update { _id: user.rocketId }, { $addToSet: { importIds: user.id } }\n\t\t\t\t\t\t\t@userTags.push\n\t\t\t\t\t\t\t\tslack: \"<@#{user.id}>\"\n\t\t\t\t\t\t\t\tslackLong: \"<@#{user.id}|#{user.name}>\"\n\t\t\t\t\t\t\t\trocket: \"@#{existantUser.username}\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tuserId = Accounts.createUser { email: user.profile.email, password: Date.now() + user.name + user.profile.email.toUpperCase() }\n\t\t\t\t\t\t\tMeteor.runAsUser userId, () =>\n\t\t\t\t\t\t\t\tMeteor.call 'setUsername', user.name\n\t\t\t\t\t\t\t\tMeteor.call 'joinDefaultChannels', true\n\t\t\t\t\t\t\t\turl = null\n\t\t\t\t\t\t\t\tif user.profile.image_original\n\t\t\t\t\t\t\t\t\turl = user.profile.image_original\n\t\t\t\t\t\t\t\telse if user.profile.image_512\n\t\t\t\t\t\t\t\t\turl = user.profile.image_512\n\t\t\t\t\t\t\t\tMeteor.call 'setAvatarFromService', url, null, 'url'\n\t\t\t\t\t\t\t\t# Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600\n\t\t\t\t\t\t\t\tif user.tz_offset\n\t\t\t\t\t\t\t\t\tMeteor.call 'updateUserUtcOffset', user.tz_offset / 3600\n\n\t\t\t\t\t\t\tRocketChat.models.Users.update { _id: userId }, { $addToSet: { importIds: user.id } }\n\n\t\t\t\t\t\t\tif user.profile.real_name\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName userId, user.profile.real_name\n\t\t\t\t\t\t\t#Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\tif user.deleted\n\t\t\t\t\t\t\t\tMeteor.call 'setUserActiveStatus', userId, false\n\t\t\t\t\t\t\t#TODO: Maybe send emails?\n\t\t\t\t\t\t\tuser.rocketId = userId\n\t\t\t\t\t\t\t@userTags.push\n\t\t\t\t\t\t\t\tslack: \"<@#{user.id}>\"\n\t\t\t\t\t\t\t\tslackLong: \"<@#{user.id}|#{user.name}>\"\n\t\t\t\t\t\t\t\trocket: \"@#{user.name}\"\n\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@collection.update { _id: @users._id }, { $set: { 'users': @users.users }}\n\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_CHANNELS\n\t\t\tfor channel in @channels.channels when channel.do_import\n\t\t\t\tdo (channel) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\texistantRoom = RocketChat.models.Rooms.findOneByName channel.name\n\t\t\t\t\t\tif existantRoom or channel.is_general\n\t\t\t\t\t\t\tif channel.is_general and channel.name isnt existantRoom?.name\n\t\t\t\t\t\t\t\tMeteor.call 'saveRoomSettings', 'GENERAL', 'roomName', channel.name\n\t\t\t\t\t\t\tchannel.rocketId = if channel.is_general then 'GENERAL' else existantRoom._id\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update { _id: channel.rocketId }, { $addToSet: { importIds: channel.id } }\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tusers = []\n\t\t\t\t\t\t\tfor member in channel.members when member isnt channel.creator\n\t\t\t\t\t\t\t\tuser = @getRocketUser member\n\t\t\t\t\t\t\t\tif user?\n\t\t\t\t\t\t\t\t\tusers.push user.username\n\n\t\t\t\t\t\t\tuserId = ''\n\t\t\t\t\t\t\tfor user in @users.users when user.id is channel.creator\n\t\t\t\t\t\t\t\tuserId = user.rocketId\n\n\t\t\t\t\t\t\tif userId is ''\n\t\t\t\t\t\t\t\t@logger.warn \"Failed to find the channel creator for #{channel.name}, setting it to the current running user.\"\n\t\t\t\t\t\t\t\tuserId = startedByUserId\n\n\t\t\t\t\t\t\tMeteor.runAsUser userId, () =>\n\t\t\t\t\t\t\t\treturned = Meteor.call 'createChannel', channel.name, users\n\t\t\t\t\t\t\t\tchannel.rocketId = returned.rid\n\n\t\t\t\t\t\t\t# @TODO implement model specific function\n\t\t\t\t\t\t\troomUpdate =\n\t\t\t\t\t\t\t\tts: new Date(channel.created * 1000)\n\n\t\t\t\t\t\t\tif not _.isEmpty channel.topic?.value\n\t\t\t\t\t\t\t\troomUpdate.topic = channel.topic.value\n\t\t\t\t\t\t\t\tlastSetTopic = channel.topic.last_set\n\n\t\t\t\t\t\t\tif not _.isEmpty(channel.purpose?.value) and channel.purpose.last_set > lastSetTopic\n\t\t\t\t\t\t\t\troomUpdate.topic = channel.purpose.value\n\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update { _id: channel.rocketId }, { $set: roomUpdate, $addToSet: { importIds: channel.id } }\n\n\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@collection.update { _id: @channels._id }, { $set: { 'channels': @channels.channels }}\n\n\t\t\tmissedTypes = {}\n\t\t\tignoreTypes = { 'bot_add': true, 'file_comment': true, 'file_mention': true, 'channel_name': true }\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_MESSAGES\n\t\t\tfor channel, messagesObj of @messages\n\t\t\t\tdo (channel, messagesObj) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\tslackChannel = @getSlackChannelFromName channel\n\t\t\t\t\t\tif slackChannel?.do_import\n\t\t\t\t\t\t\troom = RocketChat.models.Rooms.findOneById slackChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } }\n\t\t\t\t\t\t\tfor date, msgs of messagesObj\n\t\t\t\t\t\t\t\t@updateRecord { 'messagesstatus': \"#{channel}/#{date}.#{msgs.messages.length}\" }\n\t\t\t\t\t\t\t\tfor message in msgs.messages\n\t\t\t\t\t\t\t\t\tmsgDataDefaults =\n\t\t\t\t\t\t\t\t\t\t_id: \"#{slackChannel.id}.S#{message.ts}\"\n\t\t\t\t\t\t\t\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000)\n\n\t\t\t\t\t\t\t\t\tif message.type is 'message'\n\t\t\t\t\t\t\t\t\t\tif message.subtype?\n\t\t\t\t\t\t\t\t\t\t\tif message.subtype is 'channel_join'\n\t\t\t\t\t\t\t\t\t\t\t\tif @getRocketUser(message.user)?\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser room._id, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'channel_leave'\n\t\t\t\t\t\t\t\t\t\t\t\tif @getRocketUser(message.user)?\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser room._id, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'me_message'\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg: \"_#{@convertSlackMessageToRocketChat(message.text)}_\"\n\t\t\t\t\t\t\t\t\t\t\t\t_.extend msgObj, msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage @getRocketUser(message.user), msgObj, room, true\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'bot_message'\n\t\t\t\t\t\t\t\t\t\t\t\tbotUser = RocketChat.models.Users.findOneById 'rocket.cat', { fields: { username: 1 }}\n\t\t\t\t\t\t\t\t\t\t\t\tbotUsername = if @bots[message.bot_id] then @bots[message.bot_id]?.name else message.username\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg: @convertSlackMessageToRocketChat(message.text)\n\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id\n\t\t\t\t\t\t\t\t\t\t\t\t\tbot: true\n\t\t\t\t\t\t\t\t\t\t\t\t\tattachments: message.attachments\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: if botUsername then botUsername else undefined\n\n\t\t\t\t\t\t\t\t\t\t\t\t_.extend msgObj, msgDataDefaults\n\n\t\t\t\t\t\t\t\t\t\t\t\tif message.edited?\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.ets = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000)\n\n\t\t\t\t\t\t\t\t\t\t\t\tif message.icons?\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.emoji = message.icons.emoji\n\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage botUser, msgObj, room, true\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'channel_purpose'\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser 'room_changed_topic', room._id, message.purpose, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'channel_topic'\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser 'room_changed_topic', room._id, message.topic, @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'pinned_item'\n\t\t\t\t\t\t\t\t\t\t\t\tif message.attachments\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tattachments: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"text\" : @convertSlackMessageToRocketChat message.attachments[0].text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"author_name\" : message.attachments[0].author_subname\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"author_icon\" : getAvatarUrlFromUsername(message.attachments[0].author_subname)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t_.extend msgObj, msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createWithTypeRoomIdMessageAndUser 'message_pinned', room._id, '', @getRocketUser(message.user), msgObj\n\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t#TODO: make this better\n\t\t\t\t\t\t\t\t\t\t\t\t\t@logger.debug('Pinned item with no attachment, needs work.');\n\t\t\t\t\t\t\t\t\t\t\t\t\t#RocketChat.models.Messages.createWithTypeRoomIdMessageAndUser 'message_pinned', room._id, '', @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\telse if message.subtype is 'file_share'\n\t\t\t\t\t\t\t\t\t\t\t\tif message.file?.url_private_download isnt undefined\n\t\t\t\t\t\t\t\t\t\t\t\t\tdetails =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage_id: \"S#{message.ts}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: message.file.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize: message.file.size\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: message.file.mimetype\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id\n\t\t\t\t\t\t\t\t\t\t\t\t\t@uploadFile details, message.file.url_private_download, @getRocketUser(message.user), room, new Date(parseInt(message.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\tif not missedTypes[message.subtype] and not ignoreTypes[message.subtype]\n\t\t\t\t\t\t\t\t\t\t\t\t\tmissedTypes[message.subtype] = message\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tuser = @getRocketUser(message.user)\n\t\t\t\t\t\t\t\t\t\t\tif user?\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsg: @convertSlackMessageToRocketChat message.text\n\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id\n\t\t\t\t\t\t\t\t\t\t\t\t\tu:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\n\t\t\t\t\t\t\t\t\t\t\t\t_.extend msgObj, msgDataDefaults\n\n\t\t\t\t\t\t\t\t\t\t\t\tif message.edited?\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.ets = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000)\n\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage @getRocketUser(message.user), msgObj, room, true\n\t\t\t\t\t\t\t\t\t@addCountCompleted 1\n\t\t\tconsole.log missedTypes\n\t\t\t@updateProgress Importer.ProgressStep.FINISHING\n\t\t\tfor channel in @channels.channels when channel.do_import and channel.is_archived\n\t\t\t\tdo (channel) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\tMeteor.call 'archiveRoom', channel.rocketId\n\n\t\t\t@updateProgress Importer.ProgressStep.DONE\n\t\t\ttimeTook = Date.now() - start\n\t\t\t@logger.log \"Import took #{timeTook} milliseconds.\"\n\n\t\treturn @getProgress()\n\n\tgetSlackChannelFromName: (channelName) =>\n\t\tfor channel in @channels.channels when channel.name is channelName\n\t\t\treturn channel\n\n\tgetRocketUser: (slackId) =>\n\t\tfor user in @users.users when user.id is slackId\n\t\t\treturn RocketChat.models.Users.findOneById user.rocketId, { fields: { username: 1 }}\n\n\tconvertSlackMessageToRocketChat: (message) =>\n\t\tif message?\n\t\t\tmessage = message.replace /<!everyone>/g, '@all'\n\t\t\tmessage = message.replace /<!channel>/g, '@all'\n\t\t\tmessage = message.replace /&gt;/g, '<'\n\t\t\tmessage = message.replace /&lt;/g, '>'\n\t\t\tmessage = message.replace /&amp;/g, '&'\n\t\t\tmessage = message.replace /:simple_smile:/g, ':smile:'\n\t\t\tmessage = message.replace /:memo:/g, ':pencil:'\n\t\t\tmessage = message.replace /:piggy:/g, ':pig:'\n\t\t\tmessage = message.replace /:uk:/g, ':gb:'\n\t\t\tmessage = message.replace /<(http[s]?:[^>]*)>/g, '$1'\n\t\t\tfor userReplace in @userTags\n\t\t\t\tmessage = message.replace userReplace.slack, userReplace.rocket\n\t\t\t\tmessage = message.replace userReplace.slackLong, userReplace.rocket\n\t\telse\n\t\t\tmessage = ''\n\t\treturn message\n\n\tgetSelection: () =>\n\t\tselectionUsers = @users.users.map (user) ->\n\t\t\treturn new Importer.SelectionUser user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot\n\t\tselectionChannels = @channels.channels.map (channel) ->\n\t\t\treturn new Importer.SelectionChannel channel.id, channel.name, channel.is_archived, true\n\n\t\treturn new Importer.Selection @name, selectionUsers, selectionChannels\n","Importer.AddImporter 'slack', Importer.Slack,\n\tname: 'Slack'\n\tdescription: TAPi18n.__('Importer_From_Description', { from: 'Slack' })\n\tfileTypeRegex: new RegExp 'application\\/.*?zip'\n"]}