{"version":3,"sources":["meteor://ðŸ’»app/packages/dispatch_run-as-user/packages/dispatch_run-as-user.js"],"names":[],"mappingsoH","file":"/packages/dispatch_run-as-user.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/dispatch:run-as-user/lib/pre.1.0.3.js                                                      //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n// This code will go away in later versions of Meteor, this is just a \"polyfill\"                       // 1\n// until the next release of Meteor maybe 1.0.3?                                                       // 2\n//                                                                                                     // 3\nif (typeof DDPCommon === 'undefined') {                                                                // 4\n  DDPCommon = {};                                                                                      // 5\n                                                                                                       // 6\n  DDPCommon.MethodInvocation = function (options) {                                                    // 7\n    var self = this;                                                                                   // 8\n                                                                                                       // 9\n    // true if we're running not the actual method, but a stub (that is,                               // 10\n    // if we're on a client (which may be a browser, or in the future a                                // 11\n    // server connecting to another server) and presently running a                                    // 12\n    // simulation of a server-side method for latency compensation                                     // 13\n    // purposes). not currently true except in a client such as a browser,                             // 14\n    // since there's usually no point in running stubs unless you have a                               // 15\n    // zero-latency connection to the user.                                                            // 16\n                                                                                                       // 17\n    /**                                                                                                // 18\n     * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 19\n     * @locus Anywhere                                                                                 // 20\n     * @name  isSimulation                                                                             // 21\n     * @memberOf MethodInvocation                                                                      // 22\n     * @instance                                                                                       // 23\n     * @type {Boolean}                                                                                 // 24\n     */                                                                                                // 25\n    this.isSimulation = options.isSimulation;                                                          // 26\n                                                                                                       // 27\n    // call this function to allow other method invocations (from the                                  // 28\n    // same client) to continue running without waiting for this one to                                // 29\n    // complete.                                                                                       // 30\n    this._unblock = options.unblock || function () {};                                                 // 31\n    this._calledUnblock = false;                                                                       // 32\n                                                                                                       // 33\n    // current user id                                                                                 // 34\n                                                                                                       // 35\n    /**                                                                                                // 36\n     * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 37\n     * @locus Anywhere                                                                                 // 38\n     * @name  userId                                                                                   // 39\n     * @memberOf MethodInvocation                                                                      // 40\n     * @instance                                                                                       // 41\n     */                                                                                                // 42\n    this.userId = options.userId;                                                                      // 43\n                                                                                                       // 44\n    // sets current user id in all appropriate server contexts and                                     // 45\n    // reruns subscriptions                                                                            // 46\n    this._setUserId = options.setUserId || function () {};                                             // 47\n                                                                                                       // 48\n    // On the server, the connection this method call came in on.                                      // 49\n                                                                                                       // 50\n    /**                                                                                                // 51\n     * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call.\n     * @locus Server                                                                                   // 53\n     * @name  connection                                                                               // 54\n     * @memberOf MethodInvocation                                                                      // 55\n     * @instance                                                                                       // 56\n     */                                                                                                // 57\n    this.connection = options.connection;                                                              // 58\n                                                                                                       // 59\n    // The seed for randomStream value generation                                                      // 60\n    this.randomSeed = options.randomSeed;                                                              // 61\n                                                                                                       // 62\n    // This is set by RandomStream.get; and holds the random stream state                              // 63\n    this.randomStream = null;                                                                          // 64\n  };                                                                                                   // 65\n                                                                                                       // 66\n  _.extend(DDPCommon.MethodInvocation.prototype, {                                                     // 67\n    /**                                                                                                // 68\n     * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n     * @locus Server                                                                                   // 70\n     * @memberOf MethodInvocation                                                                      // 71\n     * @instance                                                                                       // 72\n     */                                                                                                // 73\n    unblock: function () {                                                                             // 74\n      var self = this;                                                                                 // 75\n      self._calledUnblock = true;                                                                      // 76\n      self._unblock();                                                                                 // 77\n    },                                                                                                 // 78\n                                                                                                       // 79\n    /**                                                                                                // 80\n     * @summary Set the logged in user.                                                                // 81\n     * @locus Server                                                                                   // 82\n     * @memberOf MethodInvocation                                                                      // 83\n     * @instance                                                                                       // 84\n     * @param {String | null} userId The value that should be returned by `userId` on this connection. // 85\n     */                                                                                                // 86\n    setUserId: function (userId) {                                                                     // 87\n      var self = this;                                                                                 // 88\n      if (self._calledUnblock)                                                                         // 89\n        throw new Error(\"Can't call setUserId in a method after calling unblock\");                     // 90\n      self.userId = userId;                                                                            // 91\n      // self._setUserId(userId);                                                                      // 92\n    }                                                                                                  // 93\n                                                                                                       // 94\n  });                                                                                                  // 95\n}                                                                                                      // 96\n                                                                                                       // 97\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/dispatch:run-as-user/lib/common.js                                                         //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n// This file adds the actual \"Meteor.runAsUser\" and \"Meteor.isRestricted\" api                          // 1\n//                                                                                                     // 2\n// It's done by using a DDP method invocation, setting a user id and a                                 // 3\n// \"isRestricted\" flag on it.                                                                          // 4\n//                                                                                                     // 5\n// If run inside of an existing DDP invocation a nested version will be created.                       // 6\n                                                                                                       // 7\nvar restrictedMode = new Meteor.EnvironmentVariable();                                                 // 8\n                                                                                                       // 9\n/**                                                                                                    // 10\n * Returns true if inside a runAsUser user scope                                                       // 11\n * @return {Boolean} True if in a runAsUser user scope                                                 // 12\n */                                                                                                    // 13\nMeteor.isRestricted = function () {                                                                    // 14\n  return !!restrictedMode.get();                                                                       // 15\n};                                                                                                     // 16\n                                                                                                       // 17\n/**                                                                                                    // 18\n * Run code restricted                                                                                 // 19\n * @param  {Function} f Code to run in restricted mode                                                 // 20\n * @return {Any}   Result of code running                                                              // 21\n */                                                                                                    // 22\nMeteor.runRestricted = function(f) {                                                                   // 23\n  if (Meteor.isRestricted()) {                                                                         // 24\n    return f();                                                                                        // 25\n  } else {                                                                                             // 26\n    return restrictedMode.withValue(true, f);                                                          // 27\n  }                                                                                                    // 28\n};                                                                                                     // 29\n                                                                                                       // 30\n/**                                                                                                    // 31\n * Run code unrestricted                                                                               // 32\n * @param  {Function} f Code to run in restricted mode                                                 // 33\n * @return {Any}   Result of code running                                                              // 34\n */                                                                                                    // 35\nMeteor.runUnrestricted = function(f) {                                                                 // 36\n  if (Meteor.isRestricted()) {                                                                         // 37\n    return restrictedMode.withValue(false, f);                                                         // 38\n  } else {                                                                                             // 39\n    f();                                                                                               // 40\n  }                                                                                                    // 41\n};                                                                                                     // 42\n                                                                                                       // 43\n/**                                                                                                    // 44\n * Run as a user                                                                                       // 45\n * @param  {String} userId The id of user to run as                                                    // 46\n * @param  {Function} f      Function to run as user                                                   // 47\n * @return {Any} Returns function result                                                               // 48\n */                                                                                                    // 49\nMeteor.runAsUser = function (userId, f) {                                                              // 50\n  var currentInvocation = DDP._CurrentInvocation.get();                                                // 51\n                                                                                                       // 52\n  // Create a new method invocation                                                                    // 53\n  var invocation = new DDPCommon.MethodInvocation(                                                     // 54\n    (currentInvocation) ? currentInvocation : {                                                        // 55\n      connection: null                                                                                 // 56\n    }                                                                                                  // 57\n  );                                                                                                   // 58\n                                                                                                       // 59\n  // Now run as user on this invocation                                                                // 60\n  invocation.setUserId(userId);                                                                        // 61\n                                                                                                       // 62\n  return DDP._CurrentInvocation.withValue(invocation, function () {                                    // 63\n    return f.apply(invocation, [userId]);                                                              // 64\n  });                                                                                                  // 65\n};                                                                                                     // 66\n                                                                                                       // 67\n/**                                                                                                    // 68\n * Run as restricted user                                                                              // 69\n * @param  {Function} f Function to run unrestricted                                                   // 70\n * @return {Any}   Returns function result                                                             // 71\n */                                                                                                    // 72\nMeteor.runAsRestrictedUser = function(userId, f) {                                                     // 73\n  return Meteor.runRestricted(function() {                                                             // 74\n    return Meteor.runAsUser(userId, f);                                                                // 75\n  });                                                                                                  // 76\n};                                                                                                     // 77\n                                                                                                       // 78\nvar adminMode = new Meteor.EnvironmentVariable();                                                      // 79\n                                                                                                       // 80\n/**                                                                                                    // 81\n * Check if code is running isside an invocation / method                                              // 82\n */                                                                                                    // 83\nMeteor.isAdmin = function() {                                                                          // 84\n  return !!adminMode.get();                                                                            // 85\n};                                                                                                     // 86\n                                                                                                       // 87\n/**                                                                                                    // 88\n * Make the function run outside invocation                                                            // 89\n */                                                                                                    // 90\nMeteor.runAsAdmin = function(f) {                                                                      // 91\n  if (Meteor.isAdmin()) {                                                                              // 92\n    return f();                                                                                        // 93\n  } else {                                                                                             // 94\n    return adminMode.withValue(false, f);                                                              // 95\n  }                                                                                                    // 96\n};                                                                                                     // 97\n                                                                                                       // 98\n/**                                                                                                    // 99\n * Make sure code runs outside an invocation on the                                                    // 100\n * server                                                                                              // 101\n */                                                                                                    // 102\nMeteor.runOutsideInvocation = function(f) {                                                            // 103\n  if (Meteor.isServer && DDP._CurrentInvocation.get()) {                                               // 104\n    DDP._CurrentInvocation.withValue(null, f);                                                         // 105\n  } else {                                                                                             // 106\n    f();                                                                                               // 107\n  }                                                                                                    // 108\n};                                                                                                     // 109\n                                                                                                       // 110\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/dispatch:run-as-user/lib/collection.overwrites.js                                          //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n// This file overwrites the default metoer Mongo.Collection modifiers: \"insert\",                       // 1\n// \"update\", \"remove\"                                                                                  // 2\n//                                                                                                     // 3\n// The new methods are checking if Meteor is in \"restricted\" mode to apply                             // 4\n// allow and deny rules if needed.                                                                     // 5\n//                                                                                                     // 6\n// This will allow us to run the modifiers inside of a \"Meteor.runAsUser\" with                         // 7\n// security checks.                                                                                    // 8\n_.each(['insert', 'update', 'remove'], function (method) {                                             // 9\n                                                                                                       // 10\n  var _super = Mongo.Collection.prototype[method];                                                     // 11\n                                                                                                       // 12\n  Mongo.Collection.prototype[method] = function ( /* arguments */ ) {                                  // 13\n    var self = this;                                                                                   // 14\n    var args = _.toArray(arguments);                                                                   // 15\n                                                                                                       // 16\n    // Check if this method is run in restricted mode and collection is                                // 17\n    // restricted.                                                                                     // 18\n    if (Meteor.isRestricted() && self._restricted) {                                                   // 19\n                                                                                                       // 20\n      var generatedId = null;                                                                          // 21\n      if (method === 'insert' && !_.has(args[0], '_id')) {                                             // 22\n        generatedId = self._makeNewID();                                                               // 23\n      }                                                                                                // 24\n                                                                                                       // 25\n      // short circuit if there is no way it will pass.                                                // 26\n      if (self._validators[method].allow.length === 0) {                                               // 27\n        throw new Meteor.Error(                                                                        // 28\n          403, 'Access denied. No allow validators set on restricted ' +                               // 29\n          'collection for method \\'' + method + '\\'.');                                                // 30\n      }                                                                                                // 31\n                                                                                                       // 32\n      var validatedMethodName =                                                                        // 33\n        '_validated' + method.charAt(0).toUpperCase() + method.slice(1);                               // 34\n      args.unshift(Meteor.userId());                                                                   // 35\n                                                                                                       // 36\n      if (method === 'insert') {                                                                       // 37\n        args.push(generatedId);                                                                        // 38\n                                                                                                       // 39\n        self[validatedMethodName].apply(self, args);                                                   // 40\n        // xxx: for now we return the id since self._validatedInsert doesn't                           // 41\n        // yet return the new id                                                                       // 42\n        return generatedId || args[0]._id;                                                             // 43\n                                                                                                       // 44\n      }                                                                                                // 45\n                                                                                                       // 46\n      return self[validatedMethodName].apply(self, args);                                              // 47\n                                                                                                       // 48\n    }                                                                                                  // 49\n                                                                                                       // 50\n    return _super.apply(self, args);                                                                   // 51\n  };                                                                                                   // 52\n                                                                                                       // 53\n});                                                                                                    // 54\n                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}