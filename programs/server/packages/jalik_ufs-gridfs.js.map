{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik_ufs-gridfs/ufs-gridfs.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6F","file":"/packages/jalik_ufs-gridfs.js","sourcesContent":["if (Meteor.isServer) {\n    var Grid = Npm.require('gridfs-stream');\n}\n\n/**\n * GridFS store\n * @param options\n * @constructor\n */\nUploadFS.store.GridFS = function (options) {\n    // Set default options\n    options = _.extend({\n        chunkSize: 1024 * 255,\n        collectionName: 'uploadfs'\n    }, options);\n\n    // Check options\n    if (!Match.test(options.chunkSize, Number)) {\n        throw new TypeError('chunkSize is not a number');\n    }\n\n    if (!Match.test(options.collectionName, String)) {\n        throw new TypeError('collectionName is not a string');\n    }\n\n    // Create the store\n    var store = new UploadFS.Store(options);\n\n    if (Meteor.isServer) {\n        var mongo = Package.mongo.MongoInternals.NpmModule;\n        var db = Package.mongo.MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n\n        mongoStore = new Grid(db, mongo);\n\n        /**\n         * Removes the file\n         * @param fileId\n         * @param callback\n         */\n        store.delete = function (fileId, callback) {\n            if (typeof callback !== 'function') {\n                callback = function (err) {\n                    if (err) {\n                        console.error(err);\n                    }\n                }\n            }\n            \n            return mongoStore.remove({\n                filename: fileId,\n                root: options.collectionName\n            }, callback);\n        };\n\n        /**\n         * Returns the file read stream\n         * @param fileId\n         * @return {*}\n         */\n        store.getReadStream = function (fileId) {\n            return mongoStore.createReadStream({\n                _id: fileId,\n                root: options.collectionName\n            });\n        };\n\n        /**\n         * Returns the file write stream\n         * @param fileId\n         * @return {*}\n         */\n        store.getWriteStream = function (fileId, file) {\n            var writeStream = mongoStore.createWriteStream({\n                _id: fileId,\n                filename: fileId,\n                mode: 'w',\n                chunkSize: options.chunkSize,\n                root: options.collectionName,\n                content_type: file.type\n            });\n\n            writeStream.on('close', function() {\n                writeStream.emit('finish');\n            });\n\n            return writeStream;\n        };\n    }\n\n    return store;\n};"]}