{"version":3,"sources":["meteor://ðŸ’»app/packages/ostrio_cookies/cookies.coffee"],"names":[],"mappings":"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","file":"/packages/ostrio_cookies.js","sourcesContent":["###\n@url https://github.com/jshttp/cookie/blob/master/index.js\n@name cookie\n@author jshttp\n@license\n(The MIT License)\n\nCopyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\nCopyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n###\n\ndecode = decodeURIComponent\nencode = encodeURIComponent\npairSplitRegExp = /; */\n\n###\nRegExp to match field-content in RFC 7230 sec 3.2\n\nfield-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\nfield-vchar   = VCHAR / obs-text\nobs-text      = %x80-FF\n###\nfieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/\n\n###\n@param {String} str\n@param {Object} [options]\n@return {Object}\n@description\nParse a cookie header.\nParse the given cookie header string into an object\nThe object has the various cookies as keys(names) => values\n@private\n###\n\nparse = (str, options) ->\n  if typeof str != 'string'\n    throw new TypeError('argument str must be a string')\n  obj = {}\n  opt = options or {}\n  pairs = str.split(pairSplitRegExp)\n  dec = opt.decode or decode\n  pairs.forEach (pair) ->\n    eq_idx = pair.indexOf('=')\n    # skip things that don't look like key=value\n    if eq_idx < 0\n      return\n    key = pair.substr(0, eq_idx).trim()\n    val = pair.substr(++eq_idx, pair.length).trim()\n    # quoted values\n    if '\"' == val[0]\n      val = val.slice(1, -1)\n    # only assign once\n    if undefined == obj[key]\n      obj[key] = tryDecode(val, dec)\n    return\n  obj\n\n###\n@param {String} name\n@param {String} val\n@param {Object} [options]\n@return {String}\n@description\nSerialize data into a cookie header.\nSerialize the a name value pair into a cookie string suitable for\nhttp headers. An optional options object specified cookie parameters.\nserialize('foo', 'bar', { httpOnly: true })\n  => \"foo=bar; httpOnly\"\n@private\n###\n\nserialize = (name, val, options) ->\n  opt = options or {}\n  enc = opt.encode or encode\n  if !fieldContentRegExp.test(name)\n    throw new TypeError('argument name is invalid')\n  if val\n    value = enc(val) \n    if value and !fieldContentRegExp.test(value)\n      throw new TypeError('argument val is invalid')\n  else\n    value = ''\n  pairs = [ name + '=' + value ]\n  if opt.maxAge\n    maxAge = opt.maxAge - 0\n    if isNaN(maxAge)\n      throw new Error('maxAge should be a Number')\n    pairs.push 'Max-Age=' + maxAge\n  if opt.domain\n    if !fieldContentRegExp.test(opt.domain)\n      throw new TypeError('option domain is invalid')\n    pairs.push 'Domain=' + opt.domain\n  else\n    pairs.push 'Domain='\n  if opt.path\n    if !fieldContentRegExp.test(opt.path)\n      throw new TypeError('option path is invalid')\n    pairs.push 'Path=' + opt.path\n  else\n    pairs.push 'Path=/'\n  opt.expires = opt.expires or opt.expire\n  if opt.expires\n    if opt.expires is Infinity\n      pair.push 'Expires=Fri, 31 Dec 9999 23:59:59 GMT'\n    else if opt.expires instanceof Date\n      pairs.push 'Expires=' + opt.expires.toUTCString()\n    else if _.isNumber opt.expires\n      pairs.push 'Expires=' + (new Date(opt.expires)).toUTCString()\n  if opt.httpOnly\n    pairs.push 'HttpOnly'\n  if opt.secure\n    pairs.push 'Secure'\n  if opt.firstPartyOnly\n    pairs.push 'First-Party-Only'\n  pairs.join '; '\n\n###\n@param {String} str\n@param {Function} decode\n@description Try decoding a string using a decoding function.\n@private\n###\ntryDecode = (str, decode) ->\n  try\n    return decode(str)\n  catch e\n    return str\n  return\n\nclass __cookies\n  constructor: (_cookies, @collection, @TTL, @runOnServer, @response) ->\n    if _.isObject _cookies\n      @cookies = _cookies\n    else\n      @cookies = parse _cookies\n\n  ###\n  @function\n  @namespace __cookies\n  @name get\n  @param {String} key  - The name of the cookie to read\n  @param {String} _tmp - Unparsed string instead of user's cookies\n  @description Read a cookie. If the cookie doesn't exist a null value will be returned.\n  @returns {String|null}\n  ###\n  get: (key, _tmp) ->\n    _cs = if _tmp then parse _tmp else @cookies\n\n    if not key or not _cs\n      null\n    else \n      if _cs?[key] then _cs[key] else null\n\n  ###\n  @function\n  @namespace __cookies\n  @name set\n  @param {String}  key          - The name of the cookie to create/overwrite\n  @param {String}  value        - The value of the cookie\n  @param {Number}  opts.expires - [Optional] The max-age in seconds (e.g. 31536e3\n  for a year, Infinity for a never-expires cookie), or the expires date in\n  GMTString format or as Date object; if not specified the cookie will\n  expire at the end of session (number â€“ finite or Infinity â€“ string, Date object or null).\n  @param {String}  opts.path    - [Optional] The path from where the cookie will be\n  readable. E.g., \"/\", \"/mydir\"; if not specified, defaults to the current\n  path of the current document location (string or null). The path must be\n  absolute (see RFC 2965). For more information on how to use relative paths\n  in this argument, see: https://developer.mozilla.org/en-US/docs/Web/API/document.cookie#Using_relative_URLs_in_the_path_parameter\n  @param {String}  opts.domain   - [Optional] The domain from where the cookie will\n  be readable. E.g., \"example.com\", \".example.com\" (includes all subdomains)\n  or \"subdomain.example.com\"; if not specified, defaults to the host portion\n  of the current document location (string or null).\n  @param {Boolean} opts.secure  - [Optional] The cookie will be transmitted only\n  over secure protocol as https (boolean or null).\n  @description Create/overwrite a cookie.\n  @returns {Boolean}\n  ###\n  set: (key, value, opts = {}) ->\n    if key and value\n      opts.expires ?= new Date (+new Date) + @TTL\n      opts.path    ?= '/'\n      opts.domain  ?= ''\n      opts.secure  ?= ''\n      \n      newCookie = serialize key, value, opts\n      @cookies[key] = value\n\n      if Meteor.isClient\n        document.cookie = newCookie\n      else\n        @response.setHeader 'Set-Cookie', newCookie\n      true\n    else\n      false\n\n  ###\n  @function\n  @namespace __cookies\n  @name remove\n  @param {String} key    - The name of the cookie to create/overwrite\n  @param {String} path   - [Optional] The path from where the cookie will be\n  readable. E.g., \"/\", \"/mydir\"; if not specified, defaults to the current\n  path of the current document location (string or null). The path must be\n  absolute (see RFC 2965). For more information on how to use relative paths\n  in this argument, see: https://developer.mozilla.org/en-US/docs/Web/API/document.cookie#Using_relative_URLs_in_the_path_parameter\n  @param {String} domain - [Optional] The domain from where the cookie will\n  be readable. E.g., \"example.com\", \".example.com\" (includes all subdomains)\n  or \"subdomain.example.com\"; if not specified, defaults to the host portion\n  of the current document location (string or null).\n  @description Remove a cookie(s).\n  @returns {Boolean}\n  ###\n  remove: (key, path = '/', domain = '') ->\n    if key\n      newCookie = serialize key, '', {domain, path, expires: new Date(0)}\n      return false unless @has(key)\n\n      delete @cookies[key]\n      if Meteor.isClient\n        document.cookie = newCookie\n      else\n        @response.setHeader 'Set-Cookie', newCookie\n      true\n    else if @keys().length > 0 and @keys()[0] isnt \"\"\n      @remove k for k in @keys()\n      true\n    else\n      false\n\n  ###\n  @function\n  @namespace __cookies\n  @name has\n  @param {String} key  - The name of the cookie to create/overwrite\n  @param {String} _tmp - Unparsed string instead of user's cookies\n  @description Check whether a cookie exists in the current position.\n  @returns {Boolean}\n  ###\n  has: (key, _tmp) ->\n    _cs = if _tmp then parse _tmp else @cookies\n\n    if not key or not _cs\n      return false\n    else \n      !!_cs?[key]\n\n  ###\n  @function\n  @namespace __cookies\n  @name keys\n  @description Returns an array of all readable cookies from this location.\n  @returns {[String]}\n  ###\n  keys: -> if @cookies then Object.keys @cookies else []\n\n  ###\n  @function\n  @namespace __cookies\n  @name send\n  @description Send all cookies over XHR to server.\n  @returns {void}\n  ###\n  send: ->\n    if @runOnServer\n      HTTP.get (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX or '') + '/___cookie___/set', () -> return\n    else\n      throw new Meteor.Error '400', 'Can\\'t send cookies on server when `runOnServer` is false.'\n\n__middlewareHandler = (req, res, self) ->\n  if self.runOnServer\n    if req.headers?.cookie\n      _cookies = parse req.headers.cookie\n    else\n      _cookies = {}\n    return new __cookies _cookies, self.collection, self.TTL, self.runOnServer, res\n  else\n    throw new Meteor.Error '400', 'Can\\'t use middleware when `runOnServer` is false.'\n\nclass Cookies extends __cookies\n  constructor: (opts = {}) ->\n    {@runOnServer, @handler, @TTL, @auto} = opts\n\n    @runOnServer ?= opts.runOnServer or true\n    @TTL         ?= opts.TTL or 1000 * 60 * 60 * 24 * 31\n\n    if Meteor.isServer\n      if @runOnServer\n        @auto    ?= true\n        @handler ?= (c) -> return\n\n        unless Cookies.isLoadedOnServer\n          if @auto\n            self = @\n            WebApp.connectHandlers.use (req, res, next) ->\n              req.Cookies = __middlewareHandler req, res, self\n              next()\n\n          Cookies.isLoadedOnServer = true\n    else\n      super document.cookie, null, @TTL, @runOnServer\n\n  ###\n  @function\n  @namespace Cookies\n  @name middleware\n  @description Get Cookies instance into callback\n  @returns {void}\n  ###\n  middleware: ->\n    self = @\n    return (req, res, next) -> \n      _cookie = __middlewareHandler req, res, self\n      self.handler and self.handler _cookie\n      next()\n\nCookies.isLoadedOnServer = false if Meteor.isServer\n"]}