{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_importer-hipchat/server.coffee","meteor://ðŸ’»app/packages/rocketchat_importer-hipchat/main.coffee"],"names":[],"mappings":"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","file":"/packages/rocketchat_importer-hipchat.js","sourcesContent":["Importer.HipChat = class Importer.HipChat extends Importer.Base\n\t@RoomPrefix = 'hipchat_export/rooms/'\n\t@UsersPrefix = 'hipchat_export/users/'\n\n\tconstructor: (name, descriptionI18N, fileTypeRegex) ->\n\t\tsuper(name, descriptionI18N, fileTypeRegex)\n\t\t@logger.debug('Constructed a new Slack Importer.')\n\t\t@userTags = []\n\n\tprepare: (dataURI, sentContentType, fileName) =>\n\t\tsuper(dataURI, sentContentType, fileName)\n\n\t\t{image, contentType} = RocketChatFile.dataURIParse dataURI\n\t\tzip = new @AdmZip(new Buffer(image, 'base64'))\n\t\tzipEntries = zip.getEntries()\n\n\t\ttempRooms = []\n\t\ttempUsers = []\n\t\ttempMessages = {}\n\t\tfor entry in zipEntries\n\t\t\tdo (entry) =>\n\t\t\t\tif entry.entryName.indexOf('__MACOSX') > -1\n\t\t\t\t\t#ignore all of the files inside of __MACOSX\n\t\t\t\t\t@logger.debug(\"Ignoring the file: #{entry.entryName}\")\n\t\t\t\tif not entry.isDirectory\n\t\t\t\t\tif entry.entryName.indexOf(Importer.HipChat.RoomPrefix) > -1\n\t\t\t\t\t\troomName = entry.entryName.split(Importer.HipChat.RoomPrefix)[1]\n\t\t\t\t\t\tif roomName is 'list.json'\n\t\t\t\t\t\t\t@updateProgress Importer.ProgressStep.PREPARING_CHANNELS\n\t\t\t\t\t\t\ttempRooms = JSON.parse(entry.getData().toString()).rooms\n\t\t\t\t\t\t\tfor room in tempRooms\n\t\t\t\t\t\t\t\troom.name = _.slugify room.name\n\t\t\t\t\t\telse if roomName.indexOf('/') > -1\n\t\t\t\t\t\t\titem = roomName.split('/')\n\t\t\t\t\t\t\troomName = _.slugify item[0] #random\n\t\t\t\t\t\t\tmsgGroupData = item[1].split('.')[0] #2015-10-04\n\t\t\t\t\t\t\tif not tempMessages[roomName]\n\t\t\t\t\t\t\t\ttempMessages[roomName] = {}\n\t\t\t\t\t\t\t# For some reason some of the json files in the HipChat export aren't valid JSON\n\t\t\t\t\t\t\t# files, so we need to catch those and just ignore them (sadly).\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\ttempMessages[roomName][msgGroupData] = JSON.parse entry.getData().toString()\n\t\t\t\t\t\t\tcatch\n\t\t\t\t\t\t\t\t@logger.warn \"#{entry.entryName} is not a valid JSON file! Unable to import it.\"\n\t\t\t\t\telse if entry.entryName.indexOf(Importer.HipChat.UsersPrefix) > -1\n\t\t\t\t\t\tusersName = entry.entryName.split(Importer.HipChat.UsersPrefix)[1]\n\t\t\t\t\t\tif usersName is 'list.json'\n\t\t\t\t\t\t\t@updateProgress Importer.ProgressStep.PREPARING_USERS\n\t\t\t\t\t\t\ttempUsers = JSON.parse(entry.getData().toString()).users\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t@logger.warn \"Unexpected file in the #{@name} import: #{entry.entryName}\"\n\n\t\t# Insert the users record, eventually this might have to be split into several ones as well\n\t\t# if someone tries to import a several thousands users instance\n\t\tusersId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'users', 'users': tempUsers }\n\t\t@users = @collection.findOne usersId\n\t\t@updateRecord { 'count.users': tempUsers.length }\n\t\t@addCountToTotal tempUsers.length\n\n\t\t# Insert the rooms records.\n\t\tchannelsId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'channels', 'channels': tempRooms }\n\t\t@channels = @collection.findOne channelsId\n\t\t@updateRecord { 'count.channels': tempRooms.length }\n\t\t@addCountToTotal tempRooms.length\n\n\t\t# Insert the messages records\n\t\t@updateProgress Importer.ProgressStep.PREPARING_MESSAGES\n\t\tmessagesCount = 0\n\t\tfor channel, messagesObj of tempMessages\n\t\t\tdo (channel, messagesObj) =>\n\t\t\t\tif not @messages[channel]\n\t\t\t\t\t@messages[channel] = {}\n\t\t\t\tfor date, msgs of messagesObj\n\t\t\t\t\tmessagesCount += msgs.length\n\t\t\t\t\t@updateRecord { 'messagesstatus': \"#{channel}/#{date}\" }\n\n\t\t\t\t\tif Importer.Base.getBSONSize(msgs) > Importer.Base.MaxBSONSize\n\t\t\t\t\t\tfor splitMsg, i in Importer.Base.getBSONSafeArraysFromAnArray(msgs)\n\t\t\t\t\t\t\tmessagesId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'messages', 'name': \"#{channel}/#{date}.#{i}\", 'messages': splitMsg }\n\t\t\t\t\t\t\t@messages[channel][\"#{date}.#{i}\"] = @collection.findOne messagesId\n\t\t\t\t\telse\n\t\t\t\t\t\tmessagesId = @collection.insert { 'import': @importRecord._id, 'importer': @name, 'type': 'messages', 'name': \"#{channel}/#{date}\", 'messages': msgs }\n\t\t\t\t\t\t@messages[channel][date] = @collection.findOne messagesId\n\n\t\t@updateRecord { 'count.messages': messagesCount, 'messagesstatus': null }\n\t\t@addCountToTotal messagesCount\n\n\t\tif tempUsers.length is 0 or tempRooms.length is 0 or messagesCount is 0\n\t\t\t@logger.warn \"The loaded users count #{tempUsers.length}, the loaded channels #{tempChannels.length}, and the loaded messages #{messagesCount}\"\n\t\t\t@updateProgress Importer.ProgressStep.ERROR\n\t\t\treturn @getProgress()\n\n\t\tselectionUsers = tempUsers.map (user) ->\n\t\t\t#HipChat's export doesn't contain bot users, from the data I've seen\n\t\t\treturn new Importer.SelectionUser user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot\n\t\tselectionChannels = tempRooms.map (room) ->\n\t\t\treturn new Importer.SelectionChannel room.room_id, room.name, room.is_archived, true\n\n\t\t@updateProgress Importer.ProgressStep.USER_SELECTION\n\t\treturn new Importer.Selection @name, selectionUsers, selectionChannels\n\n\tstartImport: (importSelection) =>\n\t\tsuper(importSelection)\n\t\tstart = Date.now()\n\n\t\tfor user in importSelection.users\n\t\t\tfor u in @users.users when u.user_id is user.user_id\n\t\t\t\tu.do_import = user.do_import\n\t\t@collection.update { _id: @users._id }, { $set: { 'users': @users.users }}\n\n\t\tfor channel in importSelection.channels\n\t\t\tfor c in @channels.channels when c.room_id is channel.channel_id\n\t\t\t\tc.do_import = channel.do_import\n\t\t@collection.update { _id: @channels._id }, { $set: { 'channels': @channels.channels }}\n\n\t\tstartedByUserId = Meteor.userId()\n\t\tMeteor.defer =>\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_USERS\n\t\t\tfor user in @users.users when user.do_import\n\t\t\t\tdo (user) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByEmailAddress user.email\n\t\t\t\t\t\tif existantUser\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id\n\t\t\t\t\t\t\t@userTags.push\n\t\t\t\t\t\t\t\thipchat: \"@#{user.mention_name}\"\n\t\t\t\t\t\t\t\trocket: \"@#{existantUser.username}\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tuserId = Accounts.createUser { email: user.email, password: Date.now() + user.name + user.email.toUpperCase() }\n\t\t\t\t\t\t\tuser.rocketId = userId\n\t\t\t\t\t\t\t@userTags.push\n\t\t\t\t\t\t\t\thipchat: \"@#{user.mention_name}\"\n\t\t\t\t\t\t\t\trocket: \"@#{user.mention_name}\"\n\t\t\t\t\t\t\tMeteor.runAsUser userId, () =>\n\t\t\t\t\t\t\t\tMeteor.call 'setUsername', user.mention_name\n\t\t\t\t\t\t\t\tMeteor.call 'joinDefaultChannels', true\n\t\t\t\t\t\t\t\tMeteor.call 'setAvatarFromService', user.photo_url, null, 'url'\n\t\t\t\t\t\t\t\tMeteor.call 'updateUserUtcOffset', parseInt moment().tz(user.timezone).format('Z').toString().split(':')[0]\n\n\t\t\t\t\t\t\tif user.name?\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName userId, user.name\n\n\t\t\t\t\t\t\t#Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\tif user.is_deleted\n\t\t\t\t\t\t\t\tMeteor.call 'setUserActiveStatus', userId, false\n\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@collection.update { _id: @users._id }, { $set: { 'users': @users.users }}\n\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_CHANNELS\n\t\t\tfor channel in @channels.channels when channel.do_import\n\t\t\t\tdo (channel) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\tchannel.name = channel.name.replace(/ /g, '')\n\t\t\t\t\t\texistantRoom = RocketChat.models.Rooms.findOneByName channel.name\n\t\t\t\t\t\tif existantRoom\n\t\t\t\t\t\t\tchannel.rocketId = existantRoom._id\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tuserId = ''\n\t\t\t\t\t\t\tfor user in @users.users when user.user_id is channel.owner_user_id\n\t\t\t\t\t\t\t\tuserId = user.rocketId\n\n\t\t\t\t\t\t\tif userId is ''\n\t\t\t\t\t\t\t\t@logger.warn \"Failed to find the channel creator for #{channel.name}, setting it to the current running user.\"\n\t\t\t\t\t\t\t\tuserId = startedByUserId\n\n\t\t\t\t\t\t\tMeteor.runAsUser userId, () =>\n\t\t\t\t\t\t\t\treturned = Meteor.call 'createChannel', channel.name, []\n\t\t\t\t\t\t\t\tchannel.rocketId = returned.rid\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update { _id: channel.rocketId }, { $set: { 'ts': new Date(channel.created * 1000) }}\n\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@collection.update { _id: @channels._id }, { $set: { 'channels': @channels.channels }}\n\n\t\t\t@updateProgress Importer.ProgressStep.IMPORTING_MESSAGES\n\t\t\tnousers = {};\n\t\t\tfor channel, messagesObj of @messages\n\t\t\t\tdo (channel, messagesObj) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\thipchatChannel = @getHipChatChannelFromName channel\n\t\t\t\t\t\tif hipchatChannel?.do_import\n\t\t\t\t\t\t\troom = RocketChat.models.Rooms.findOneById hipchatChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } }\n\t\t\t\t\t\t\tfor date, msgs of messagesObj\n\t\t\t\t\t\t\t\t@updateRecord { 'messagesstatus': \"#{channel}/#{date}.#{msgs.messages.length}\" }\n\t\t\t\t\t\t\t\tfor message in msgs.messages\n\t\t\t\t\t\t\t\t\tif message.from?\n\t\t\t\t\t\t\t\t\t\tuser = @getRocketUser(message.from.user_id)\n\t\t\t\t\t\t\t\t\t\tif user?\n\t\t\t\t\t\t\t\t\t\t\tmsgObj =\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: @convertHipChatMessageToRocketChat(message.message)\n\t\t\t\t\t\t\t\t\t\t\t\tts: new Date(message.date)\n\t\t\t\t\t\t\t\t\t\t\t\tu:\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage user, msgObj, room, true\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tif not nousers[message.from.user_id]\n\t\t\t\t\t\t\t\t\t\t\t\tnousers[message.from.user_id] = message.from\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tif not _.isArray message\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn 'Please report the following:', message\n\t\t\t\t\t\t\t\t\t@addCountCompleted 1\n\t\t\t@logger.warn 'The following did not have users:', nousers\n\n\t\t\t@updateProgress Importer.ProgressStep.FINISHING\n\t\t\tfor channel in @channels.channels when channel.do_import and channel.is_archived\n\t\t\t\tdo (channel) =>\n\t\t\t\t\tMeteor.runAsUser startedByUserId, () =>\n\t\t\t\t\t\tMeteor.call 'archiveRoom', channel.rocketId\n\n\t\t\t@updateProgress Importer.ProgressStep.DONE\n\t\t\ttimeTook = Date.now() - start\n\t\t\t@logger.log \"Import took #{timeTook} milliseconds.\"\n\n\t\treturn @getProgress()\n\n\tgetHipChatChannelFromName: (channelName) =>\n\t\tfor channel in @channels.channels when channel.name is channelName\n\t\t\treturn channel\n\n\tgetRocketUser: (hipchatId) =>\n\t\tfor user in @users.users when user.user_id is hipchatId\n\t\t\treturn RocketChat.models.Users.findOneById user.rocketId, { fields: { username: 1 }}\n\n\tconvertHipChatMessageToRocketChat: (message) =>\n\t\tif message?\n\t\t\tfor userReplace in @userTags\n\t\t\t\tmessage = message.replace userReplace.hipchat, userReplace.rocket\n\t\telse\n\t\t\tmessage = ''\n\t\treturn message\n\n\tgetSelection: () =>\n\t\tselectionUsers = @users.users.map (user) ->\n\t\t\t#HipChat's export doesn't contain bot users, from the data I've seen\n\t\t\treturn new Importer.SelectionUser user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot\n\t\tselectionChannels = @channels.channels.map (room) ->\n\t\t\treturn new Importer.SelectionChannel room.room_id, room.name, room.is_archived, true\n\n\t\treturn new Importer.Selection @name, selectionUsers, selectionChannels\n","Importer.AddImporter 'hipchat', Importer.HipChat,\n\tname: 'HipChat'\n\tdescription: TAPi18n.__('Importer_From_Description', { from: 'HipChat' })\n\tfileTypeRegex: new RegExp 'application\\/.*?zip'\n"]}