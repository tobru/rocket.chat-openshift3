{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik_ufs-local/ufs-local.js"],"names":[],"mappingswH","file":"/packages/jalik_ufs-local.js","sourcesContent":["if (Meteor.isServer) {\n    var fs = Npm.require('fs');\n    var mkdirp = Npm.require('mkdirp');\n}\n\n/**\n * File system store\n * @param options\n * @constructor\n */\nUploadFS.store.Local = function (options) {\n    // Set default options\n    options = _.extend({\n        mode: '0744',\n        path: 'ufs/uploads',\n        writeMode: '0744'\n    }, options);\n\n    // Check options\n    if (typeof options.mode !== 'string') {\n        throw new TypeError('mode is not a string');\n    }\n    if (typeof options.path !== 'string') {\n        throw new TypeError('path is not a string');\n    }\n    if (typeof options.writeMode !== 'string') {\n        throw new TypeError('writeMode is not a string');\n    }\n\n    // Private attributes\n    var mode = options.mode;\n    var path = options.path;\n    var writeMode = options.writeMode;\n\n    if (Meteor.isServer) {\n        fs.stat(path, function (err) {\n            if (err) {\n                // Create the directory\n                mkdirp(path, {mode: mode}, function (err) {\n                    if (err) {\n                        console.error('ufs: cannot create store at ' + path + ' (' + err.message + ')');\n                    } else {\n                        console.info('ufs: store created at ' + path);\n                    }\n                });\n            } else {\n                // Set directory permissions\n                fs.chmod(path, mode, function (err) {\n                    err && console.error('ufs: cannot set store permissions ' + mode + ' (' + err.message + ')');\n                });\n            }\n        });\n    }\n\n    // Create the store\n    var self = new UploadFS.Store(options);\n\n    /**\n     * Returns the file path\n     * @param fileId\n     * @param file\n     * @return {string}\n     */\n    self.getFilePath = function (fileId, file) {\n        file = file || self.getCollection().findOne(fileId, {fields: {extension: 1}});\n        return file && self.getPath(fileId + (file.extension ? '.' + file.extension : ''));\n    };\n\n    /**\n     * Returns the path or sub path\n     * @param file\n     * @return {string}\n     */\n    self.getPath = function (file) {\n        return path + (file ? '/' + file : '');\n    };\n\n\n    if (Meteor.isServer) {\n        /**\n         * Removes the file\n         * @param fileId\n         * @param callback\n         */\n        self.delete = function (fileId, callback) {\n            var path = self.getFilePath(fileId);\n\n            if (typeof callback !== 'function') {\n                callback = function (err) {\n                    err && console.error('ufs: cannot delete file \"' + fileId + '\" at ' + path + ' (' + err.message + ')');\n                }\n            }\n            fs.stat(path, Meteor.bindEnvironment(function (err, stat) {\n                if (!err && stat && stat.isFile()) {\n                    fs.unlink(path, Meteor.bindEnvironment(callback));\n                }\n            }));\n        };\n\n        /**\n         * Returns the file read stream\n         * @param fileId\n         * @param file\n         * @return {*}\n         */\n        self.getReadStream = function (fileId, file) {\n            return fs.createReadStream(self.getFilePath(fileId, file), {\n                flags: 'r',\n                encoding: null,\n                autoClose: true\n            });\n        };\n\n        /**\n         * Returns the file write stream\n         * @param fileId\n         * @param file\n         * @return {*}\n         */\n        self.getWriteStream = function (fileId, file) {\n            return fs.createWriteStream(self.getFilePath(fileId, file), {\n                flags: 'a',\n                encoding: null,\n                mode: writeMode\n            });\n        };\n    }\n\n    return self;\n};\n"]}