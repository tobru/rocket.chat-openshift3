{"version":3,"sources":["meteor://ðŸ’»app/packages/konecty_delayed-task/packages/konecty_delayed-task.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wF","file":"/packages/konecty_delayed-task.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/konecty:delayed-task/konecty:delayed-task.coffee.js                 //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar             \n  __slice = [].slice;\n\nnew (DelayedTask = (function() {\n  var count, timer;\n\n  timer = null;\n\n  count = 0;\n\n  function DelayedTask() {\n    var args, flushCount, fn, time;\n    fn = arguments[0], time = arguments[1], flushCount = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];\n    this.fn = fn;\n    this.time = time != null ? time : 500;\n    this.flushCount = flushCount != null ? flushCount : 0;\n    this.args = args;\n    return this;\n  }\n\n  DelayedTask.prototype.run = function() {\n    var args, self;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    self = this;\n    return Tracker.nonreactive(function() {\n      var call;\n      if (args.length > 0) {\n        throw new Error('[DelayedTask] Tasks can\\'t be called with arguments');\n      }\n      if (timer != null) {\n        Meteor.clearTimeout(timer);\n      }\n      count++;\n      call = function() {\n        count = 0;\n        return self.fn.apply(self, self.args);\n      };\n      if (self.flushCount > 0 && count >= self.flushCount) {\n        return call();\n      }\n      return timer = Meteor.setTimeout(call, self.time);\n    });\n  };\n\n  return DelayedTask;\n\n})());\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}