{"version":3,"sources":["meteor://ðŸ’»app/packages/meteor-developer/meteor_developer_common.js","meteor://ðŸ’»app/packages/meteor-developer/meteor_developer_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ssF","file":"/packages/meteor-developer.js","sourcesContent":["MeteorDeveloperAccounts = {};\n\nMeteorDeveloperAccounts._server = \"https://www.meteor.com\";\n\n// Options are:\n//  - developerAccountsServer: defaults to \"https://www.meteor.com\"\nMeteorDeveloperAccounts._config = function (options) {\n  if (options.developerAccountsServer) {\n    MeteorDeveloperAccounts._server = options.developerAccountsServer;\n  }\n};\n","OAuth.registerService(\"meteor-developer\", 2, null, function (query) {\n  var response = getTokens(query);\n  var accessToken = response.accessToken;\n  var identity = getIdentity(accessToken);\n\n  var serviceData = {\n    accessToken: OAuth.sealSecret(accessToken),\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\n  };\n\n  _.extend(serviceData, identity);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (response.refreshToken)\n    serviceData.refreshToken = OAuth.sealSecret(response.refreshToken);\n\n  return {\n    serviceData: serviceData,\n    options: {profile: {name: serviceData.username}}\n    // XXX use username for name until meteor accounts has a profile with a name\n  };\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request and we got a\n//   refresh token from the server\nvar getTokens = function (query) {\n  var config = ServiceConfiguration.configurations.findOne({\n    service: 'meteor-developer'\n  });\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  var response;\n  try {\n    response = HTTP.post(\n      MeteorDeveloperAccounts._server + \"/oauth2/token\", {\n        params: {\n          grant_type: \"authorization_code\",\n          code: query.code,\n          client_id: config.clientId,\n          client_secret: OAuth.openSecret(config.secret),\n          redirect_uri: OAuth._redirectUri('meteor-developer', config)\n        }\n      }\n    );\n  } catch (err) {\n    throw _.extend(\n      new Error(\n        \"Failed to complete OAuth handshake with Meteor developer accounts. \"\n          + err.message\n      ),\n      {response: err.response}\n    );\n  }\n\n  if (! response.data || response.data.error) {\n    // if the http response was a json object with an error attribute\n    throw new Error(\n      \"Failed to complete OAuth handshake with Meteor developer accounts. \" +\n        (response.data ? response.data.error :\n         \"No response data\")\n    );\n  } else {\n    return {\n      accessToken: response.data.access_token,\n      refreshToken: response.data.refresh_token,\n      expiresIn: response.data.expires_in\n    };\n  }\n};\n\nvar getIdentity = function (accessToken) {\n  try {\n    return HTTP.get(\n      MeteorDeveloperAccounts._server + \"/api/v1/identity\",\n      {\n        headers: { Authorization: \"Bearer \" + accessToken }\n      }\n    ).data;\n  } catch (err) {\n    throw _.extend(\n      new Error(\"Failed to fetch identity from Meteor developer accounts. \" +\n                err.message),\n      {response: err.response}\n    );\n  }\n};\n\nMeteorDeveloperAccounts.retrieveCredential = function (credentialToken,\n                                                       credentialSecret) {\n  return OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n"]}