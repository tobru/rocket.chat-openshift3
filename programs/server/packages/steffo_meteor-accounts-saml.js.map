{"version":3,"sources":["meteor://ðŸ’»app/packages/steffo_meteor-accounts-saml/saml_server.js","meteor://ðŸ’»app/packages/steffo_meteor-accounts-saml/saml_utils.js","meteor://ðŸ’»app/packages/steffo_meteor-accounts-saml/saml_rocketchat.coffee"],"names":[],"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","file":"/packages/steffo_meteor-accounts-saml.js","sourcesContent":["/* globals RoutePolicy, SAML */\n/* jshint newcap: false */\n\nif (!Accounts.saml) {\n\tAccounts.saml = {\n\t\tsettings: {\n\t\t\tdebug: true,\n\t\t\tgenerateUsername: false,\n\t\t\tproviders: []\n\t\t}\n\t};\n}\n\nvar fiber = Npm.require('fibers');\nvar connect = Npm.require('connect');\nRoutePolicy.declare('/_saml/', 'network');\n\nMeteor.methods({\n\tsamlLogout: function(provider) {\n\t\t// Make sure the user is logged in before initiate SAML SLO\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'samlLogout' });\n\t\t}\n\t\tvar samlProvider = function(element) {\n\t\t\treturn (element.provider === provider);\n\t\t};\n\t\tvar providerConfig = Accounts.saml.settings.providers.filter(samlProvider)[0];\n\n\t\tif (Accounts.saml.settings.debug) {\n\t\t\tconsole.log('Logout request from ' + JSON.stringify(providerConfig));\n\t\t}\n\t\t// This query should respect upcoming array of SAML logins\n\t\tvar user = Meteor.users.findOne({\n\t\t\t_id: Meteor.userId(),\n\t\t\t'services.saml.provider': provider\n\t\t}, {\n\t\t\t'services.saml': 1\n\t\t});\n\t\tvar nameID = user.services.saml.nameID;\n\t\tvar sessionIndex = user.services.saml.idpSession;\n\t\tnameID = sessionIndex;\n\t\tif (Accounts.saml.settings.debug) {\n\t\t\tconsole.log('NameID for user ' + Meteor.userId() + ' found: ' + JSON.stringify(nameID));\n\t\t}\n\n\t\tvar _saml = new SAML(providerConfig);\n\n\t\tvar request = _saml.generateLogoutRequest({\n\t\t\tnameID: nameID,\n\t\t\tsessionIndex: sessionIndex\n\t\t});\n\n\t\t// request.request: actual XML SAML Request\n\t\t// request.id: comminucation id which will be mentioned in the ResponseTo field of SAMLResponse\n\n\t\tMeteor.users.update({\n\t\t\t_id: Meteor.userId()\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\t'services.saml.inResponseTo': request.id\n\t\t\t}\n\t\t});\n\n\t\tvar _syncRequestToUrl = Meteor.wrapAsync(_saml.requestToUrl, _saml);\n\t\tvar result = _syncRequestToUrl(request.request, 'logout');\n\t\tif (Accounts.saml.settings.debug) {\n\t\t\tconsole.log('SAML Logout Request ' + result);\n\t\t}\n\n\n\t\treturn result;\n\t}\n});\n\nAccounts.registerLoginHandler(function(loginRequest) {\n\tif (!loginRequest.saml || !loginRequest.credentialToken) {\n\t\treturn undefined;\n\t}\n\n\tvar loginResult = Accounts.saml.retrieveCredential(loginRequest.credentialToken);\n\tif (Accounts.saml.settings.debug) {\n\t\tconsole.log('RESULT :' + JSON.stringify(loginResult));\n\t}\n\n\tif (loginResult === undefined) {\n\t\treturn {\n\t\t\ttype: 'saml',\n\t\t\terror: new Meteor.Error(Accounts.LoginCancelledError.numericError, 'No matching login attempt found')\n\t\t};\n\t}\n\n\tif (loginResult && loginResult.profile && loginResult.profile.email) {\n\t\tvar user = Meteor.users.findOne({\n\t\t\t'emails.address': loginResult.profile.email\n\t\t});\n\n\t\tif (!user) {\n\t\t\tvar newUser = {\n\t\t\t\tname: loginResult.profile.cn || loginResult.profile.username,\n\t\t\t\tactive: true,\n\t\t\t\tglobalRoles: ['user'],\n\t\t\t\temails: [{\n\t\t\t\t\taddress: loginResult.profile.email,\n\t\t\t\t\tverified: true\n\t\t\t\t}]\n\t\t\t};\n\n\t\t\tif (Accounts.saml.settings.generateUsername === true) {\n\t\t\t\tvar username = RocketChat.generateUsernameSuggestion(newUser);\n\t\t\t\tif (username) {\n\t\t\t\t\tnewUser.username = username;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar userId = Accounts.insertUserDoc({}, newUser);\n\t\t\tuser = Meteor.users.findOne(userId);\n\t\t}\n\n\t\t//creating the token and adding to the user\n\t\tvar stampedToken = Accounts._generateStampedLoginToken();\n\t\tMeteor.users.update(user, {\n\t\t\t$push: {\n\t\t\t\t'services.resume.loginTokens': stampedToken\n\t\t\t}\n\t\t});\n\n\t\tvar samlLogin = {\n\t\t\tprovider: Accounts.saml.RelayState,\n\t\t\tidp: loginResult.profile.issuer,\n\t\t\tidpSession: loginResult.profile.sessionIndex,\n\t\t\tnameID: loginResult.profile.nameID\n\t\t};\n\n\t\tMeteor.users.update({\n\t\t\t_id: user._id\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\t// TBD this should be pushed, otherwise we're only able to SSO into a single IDP at a time\n\t\t\t\t'services.saml': samlLogin\n\t\t\t}\n\t\t});\n\n\t\t//sending token along with the userId\n\t\tvar result = {\n\t\t\tuserId: user._id,\n\t\t\ttoken: stampedToken.token\n\t\t};\n\n\t\treturn result;\n\n\t} else {\n\t\tthrow new Error('SAML Profile did not contain an email address');\n\t}\n});\n\nAccounts.saml._loginResultForCredentialToken = {};\n\nAccounts.saml.hasCredential = function(credentialToken) {\n\treturn _.has(Accounts.saml._loginResultForCredentialToken, credentialToken);\n};\n\nAccounts.saml.retrieveCredential = function(credentialToken) {\n\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\tvar result = Accounts.saml._loginResultForCredentialToken[credentialToken];\n\tdelete Accounts.saml._loginResultForCredentialToken[credentialToken];\n\treturn result;\n};\n\nvar closePopup = function(res, err) {\n\tres.writeHead(200, {\n\t\t'Content-Type': 'text/html'\n\t});\n\tvar content = '<html><head><script>window.close()</script></head><body><H1>Verified</H1></body></html>';\n\tif (err) {\n\t\tcontent = '<html><body><h2>Sorry, an annoying error occured</h2><div>' + err + '</div><a onclick=\"window.close();\">Close Window</a></body></html>';\n\t}\n\tres.end(content, 'utf-8');\n};\n\nvar samlUrlToObject = function(url) {\n\t// req.url will be '/_saml/<action>/<service name>/<credentialToken>'\n\tif (!url) {\n\t\treturn null;\n\t}\n\n\tvar splitPath = url.split('/');\n\n\t// Any non-saml request will continue down the default\n\t// middlewares.\n\tif (splitPath[1] !== '_saml') {\n\t\treturn null;\n\t}\n\n\tvar result = {\n\t\tactionName: splitPath[2],\n\t\tserviceName: splitPath[3],\n\t\tcredentialToken: splitPath[4]\n\t};\n\tif (Accounts.saml.settings.debug) {\n\t\tconsole.log(result);\n\t}\n\treturn result;\n};\n\nvar middleware = function(req, res, next) {\n\t// Make sure to catch any exceptions because otherwise we'd crash\n\t// the runner\n\ttry {\n\t\tvar samlObject = samlUrlToObject(req.url);\n\t\tif (!samlObject || !samlObject.serviceName) {\n\t\t\tnext();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!samlObject.actionName) {\n\t\t\tthrow new Error('Missing SAML action');\n\t\t}\n\n\t\tconsole.log(Accounts.saml.settings.providers);\n\t\tconsole.log(samlObject.serviceName);\n\t\tvar service = _.find(Accounts.saml.settings.providers, function(samlSetting) {\n\t\t\treturn samlSetting.provider === samlObject.serviceName;\n\t\t});\n\n\t\t// Skip everything if there's no service set by the saml middleware\n\t\tif (!service) {\n\t\t\tthrow new Error('Unexpected SAML service ' + samlObject.serviceName);\n\t\t}\n\t\tvar _saml;\n\t\tswitch (samlObject.actionName) {\n\t\t\tcase 'metadata':\n\t\t\t\t_saml = new SAML(service);\n\t\t\t\tservice.callbackUrl = Meteor.absoluteUrl('_saml/validate/' + service.provider);\n\t\t\t\tres.writeHead(200);\n\t\t\t\tres.write(_saml.generateServiceProviderMetadata(service.callbackUrl));\n\t\t\t\tres.end();\n\t\t\t\t//closePopup(res);\n\t\t\t\tbreak;\n\t\t\tcase 'logout':\n\t\t\t\t// This is where we receive SAML LogoutResponse\n\t\t\t\t_saml = new SAML(service);\n\t\t\t\t_saml.validateLogoutResponse(req.query.SAMLResponse, function(err, result) {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\tvar logOutUser = function(inResponseTo) {\n\t\t\t\t\t\t\tif (Accounts.saml.settings.debug) {\n\t\t\t\t\t\t\t\tconsole.log('Logging Out user via inResponseTo ' + inResponseTo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar loggedOutUser = Meteor.users.find({\n\t\t\t\t\t\t\t\t'services.saml.inResponseTo': inResponseTo\n\t\t\t\t\t\t\t}).fetch();\n\t\t\t\t\t\t\tif (loggedOutUser.length === 1) {\n\t\t\t\t\t\t\t\tif (Accounts.saml.settings.debug) {\n\t\t\t\t\t\t\t\t\tconsole.log('Found user ' + loggedOutUser[0]._id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tMeteor.users.update({\n\t\t\t\t\t\t\t\t\t_id: loggedOutUser[0]._id\n\t\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\t\t\t'services.resume.loginTokens': []\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tMeteor.users.update({\n\t\t\t\t\t\t\t\t\t_id: loggedOutUser[0]._id\n\t\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\t\t\t\t'services.saml': ''\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfiber(function() {\n\t\t\t\t\t\t\tlogOutUser(result);\n\t\t\t\t\t\t}).run();\n\n\n\t\t\t\t\t\tres.writeHead(302, {\n\t\t\t\t\t\t\t'Location': req.query.RelayState\n\t\t\t\t\t\t});\n\t\t\t\t\t\tres.end();\n\t\t\t\t\t}\n\t\t\t\t\t//  else {\n\t\t\t\t\t// \t// TBD thinking of sth meaning full.\n\t\t\t\t\t// }\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'sloRedirect':\n\t\t\t\tvar idpLogout = req.query.redirect;\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\t// credentialToken here is the SAML LogOut Request that we'll send back to IDP\n\t\t\t\t\t'Location': idpLogout\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t\tbreak;\n\t\t\tcase 'authorize':\n\t\t\t\tservice.callbackUrl = Meteor.absoluteUrl('_saml/validate/' + service.provider);\n\t\t\t\tservice.id = samlObject.credentialToken;\n\t\t\t\t_saml = new SAML(service);\n\t\t\t\t_saml.getAuthorizeUrl(req, function(err, url) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthrow new Error('Unable to generate authorize url');\n\t\t\t\t\t}\n\t\t\t\t\tres.writeHead(302, {\n\t\t\t\t\t\t'Location': url\n\t\t\t\t\t});\n\t\t\t\t\tres.end();\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'validate':\n\t\t\t\t_saml = new SAML(service);\n\t\t\t\tAccounts.saml.RelayState = req.body.RelayState;\n\t\t\t\t_saml.validateResponse(req.body.SAMLResponse, req.body.RelayState, function(err, profile/*, loggedOut*/) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthrow new Error('Unable to validate response url: ' + err);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar credentialToken = profile.inResponseToId || profile.InResponseTo || samlObject.credentialToken;\n\t\t\t\t\tif (!credentialToken) {\n\t\t\t\t\t\tthrow new Error('Unable to determine credentialToken');\n\t\t\t\t\t}\n\t\t\t\t\tAccounts.saml._loginResultForCredentialToken[credentialToken] = {\n\t\t\t\t\t\tprofile: profile\n\t\t\t\t\t};\n\t\t\t\t\tclosePopup(res);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unexpected SAML action ' + samlObject.actionName);\n\n\t\t}\n\t} catch (err) {\n\t\tclosePopup(res, err);\n\t}\n};\n\n// Listen to incoming SAML http requests\nWebApp.connectHandlers.use(connect.bodyParser()).use(function(req, res, next) {\n\t// Need to create a fiber since we're using synchronous http calls and nothing\n\t// else is wrapping this in a fiber automatically\n\tfiber(function() {\n\t\tmiddleware(req, res, next);\n\t}).run();\n});\n","/* globals SAML:true */\n\nvar zlib = Npm.require('zlib');\nvar xml2js = Npm.require('xml2js');\nvar xmlCrypto = Npm.require('xml-crypto');\nvar crypto = Npm.require('crypto');\nvar xmldom = Npm.require('xmldom');\nvar querystring = Npm.require('querystring');\nvar xmlbuilder = Npm.require('xmlbuilder');\n// var xmlenc = Npm.require('xml-encryption');\n// var xpath = xmlCrypto.xpath;\n// var Dom = xmldom.DOMParser;\n\n// var prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n\n\nSAML = function(options) {\n\tthis.options = this.initialize(options);\n};\n\n// var stripPrefix = function(str) {\n// \treturn str.replace(prefixMatch, '');\n// };\n\nSAML.prototype.initialize = function(options) {\n\tif (!options) {\n\t\toptions = {};\n\t}\n\n\tif (!options.protocol) {\n\t\toptions.protocol = 'https://';\n\t}\n\n\tif (!options.path) {\n\t\toptions.path = '/saml/consume';\n\t}\n\n\tif (!options.issuer) {\n\t\toptions.issuer = 'onelogin_saml';\n\t}\n\n\tif (options.identifierFormat === undefined) {\n\t\toptions.identifierFormat = 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress';\n\t}\n\n\tif (options.authnContext === undefined) {\n\t\toptions.authnContext = 'urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport';\n\t}\n\n\treturn options;\n};\n\nSAML.prototype.generateUniqueID = function() {\n\tvar chars = 'abcdef0123456789';\n\tvar uniqueID = '';\n\tfor (var i = 0; i < 20; i++) {\n\t\tuniqueID += chars.substr(Math.floor((Math.random() * 15)), 1);\n\t}\n\treturn uniqueID;\n};\n\nSAML.prototype.generateInstant = function() {\n\treturn new Date().toISOString();\n};\n\nSAML.prototype.signRequest = function(xml) {\n\tvar signer = crypto.createSign('RSA-SHA1');\n\tsigner.update(xml);\n\treturn signer.sign(this.options.privateKey, 'base64');\n};\n\nSAML.prototype.generateAuthorizeRequest = function(req) {\n\tvar id = '_' + this.generateUniqueID();\n\tvar instant = this.generateInstant();\n\n\t// Post-auth destination\n\tvar callbackUrl;\n\tif (this.options.callbackUrl) {\n\t\tcallbackUrl = this.options.callbackUrl;\n\t} else {\n\t\tcallbackUrl = this.options.protocol + req.headers.host + this.options.path;\n\t}\n\n\tif (this.options.id) {\n\t\tid = this.options.id;\n\t}\n\n\tvar request =\n\t\t'<samlp:AuthnRequest xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" ID=\"' + id + '\" Version=\"2.0\" IssueInstant=\"' + instant +\n\t\t'\" ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" AssertionConsumerServiceURL=\"' + callbackUrl + '\" Destination=\"' +\n\t\tthis.options.entryPoint + '\">' +\n\t\t'<saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">' + this.options.issuer + '</saml:Issuer>\\n';\n\n\tif (this.options.identifierFormat) {\n\t\trequest += '<samlp:NameIDPolicy xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" Format=\"' + this.options.identifierFormat +\n\t\t\t'\" AllowCreate=\"true\"></samlp:NameIDPolicy>\\n';\n\t}\n\n\trequest +=\n\t\t'<samlp:RequestedAuthnContext xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" Comparison=\"exact\">' +\n\t\t'<saml:AuthnContextClassRef xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml:AuthnContextClassRef></samlp:RequestedAuthnContext>\\n' +\n\t\t'</samlp:AuthnRequest>';\n\n\treturn request;\n};\n\nSAML.prototype.generateLogoutRequest = function(options) {\n\t// options should be of the form\n\t// nameId: <nameId as submitted during SAML SSO>\n\t// sessionIndex: sessionIndex\n\t// --- NO SAMLsettings: <Meteor.setting.saml  entry for the provider you want to SLO from\n\n\tvar id = '_' + this.generateUniqueID();\n\tvar instant = this.generateInstant();\n\n\tvar request = '<samlp:LogoutRequest xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" ' +\n\t\t'xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"' + id + '\" Version=\"2.0\" IssueInstant=\"' + instant +\n\t\t'\" Destination=\"' + this.options.idpSLORedirectURL + '\">' +\n\t\t'<saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">' + this.options.issuer + '</saml:Issuer>' +\n\t\t'<saml:NameID Format=\"' + this.options.identifierFormat + '\">' + options.nameID + '</saml:NameID>' +\n\t\t'</samlp:LogoutRequest>';\n\n\trequest = '<samlp:LogoutRequest xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"  ' +\n\t\t'ID=\"' + id + '\" ' +\n\t\t'Version=\"2.0\" ' +\n\t\t'IssueInstant=\"' + instant + '\" ' +\n\t\t'Destination=\"' + this.options.idpSLORedirectURL + '\" ' +\n\t\t'>' +\n\t\t'<saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">' + this.options.issuer + '</saml:Issuer>' +\n\t\t'<saml:NameID xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" ' +\n\t\t'NameQualifier=\"http://id.init8.net:8080/openam\" ' +\n\t\t'SPNameQualifier=\"' + this.options.issuer + '\" ' +\n\t\t'Format=\"' + this.options.identifierFormat + '\">' +\n\t\toptions.nameID + '</saml:NameID>' +\n\t\t'<samlp:SessionIndex xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\">' + options.sessionIndex + '</samlp:SessionIndex>' +\n\t\t'</samlp:LogoutRequest>';\n\tif (Meteor.settings.debug) {\n\t\tconsole.log('------- SAML Logout request -----------');\n\t\tconsole.log(request);\n\t}\n\treturn {\n\t\trequest: request,\n\t\tid: id\n\t};\n};\n\nSAML.prototype.requestToUrl = function(request, operation, callback) {\n\tvar self = this;\n\tzlib.deflateRaw(request, function(err, buffer) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\n\t\tvar base64 = buffer.toString('base64');\n\t\tvar target = self.options.entryPoint;\n\n\t\tif (operation === 'logout') {\n\t\t\tif (self.options.idpSLORedirectURL) {\n\t\t\t\ttarget = self.options.idpSLORedirectURL;\n\t\t\t}\n\t\t}\n\n\t\tif (target.indexOf('?') > 0) {\n\t\t\ttarget += '&';\n\t\t} else {\n\t\t\ttarget += '?';\n\t\t}\n\n\t\tvar samlRequest = {\n\t\t\tSAMLRequest: base64\n\t\t};\n\n\t\tif (self.options.privateCert) {\n\t\t\tsamlRequest.SigAlg = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';\n\t\t\tsamlRequest.Signature = self.signRequest(querystring.stringify(samlRequest));\n\t\t}\n\n\t\t// TBD. We should really include a proper RelayState here\n\t\tvar relayState;\n\t\tif (operation === 'logout') {\n\t\t\t// in case of logout we want to be redirected back to the Meteor app.\n\t\t\trelayState = Meteor.absoluteUrl();\n\t\t} else {\n\t\t\trelayState = self.options.provider;\n\t\t}\n\t\ttarget += querystring.stringify(samlRequest) + '&RelayState=' + relayState;\n\n\t\tif (Meteor.settings.debug) {\n\t\t\tconsole.log('requestToUrl: ' + target);\n\t\t}\n\t\tif (operation === 'logout') {\n\t\t\t// in case of logout we want to be redirected back to the Meteor app.\n\t\t\treturn callback(null, target);\n\n\t\t} else {\n\t\t\tcallback(null, target);\n\t\t}\n\t});\n};\n\nSAML.prototype.getAuthorizeUrl = function(req, callback) {\n\tvar request = this.generateAuthorizeRequest(req);\n\n\tthis.requestToUrl(request, 'authorize', callback);\n};\n\nSAML.prototype.getLogoutUrl = function(req, callback) {\n\tvar request = this.generateLogoutRequest(req);\n\n\tthis.requestToUrl(request, 'logout', callback);\n};\n\nSAML.prototype.certToPEM = function(cert) {\n\tcert = cert.match(/.{1,64}/g).join('\\n');\n\tcert = '-----BEGIN CERTIFICATE-----\\n' + cert;\n\tcert = cert + '\\n-----END CERTIFICATE-----\\n';\n\treturn cert;\n};\n\n// functionfindChilds(node, localName, namespace) {\n// \tvar res = [];\n// \tfor (var i = 0; i < node.childNodes.length; i++) {\n// \t\tvar child = node.childNodes[i];\n// \t\tif (child.localName === localName && (child.namespaceURI === namespace || !namespace)) {\n// \t\t\tres.push(child);\n// \t\t}\n// \t}\n// \treturn res;\n// }\n\nSAML.prototype.validateSignature = function(xml, cert) {\n\tvar self = this;\n\n\tvar doc = new xmldom.DOMParser().parseFromString(xml);\n\tvar signature = xmlCrypto.xpath(doc, '//*[local-name(.)=\\'Signature\\' and namespace-uri(.)=\\'http://www.w3.org/2000/09/xmldsig#\\']')[0];\n\n\tvar sig = new xmlCrypto.SignedXml();\n\n\tsig.keyInfoProvider = {\n\t\tgetKeyInfo: function(/*key*/) {\n\t\t\treturn '<X509Data></X509Data>';\n\t\t},\n\t\tgetKey: function(/*keyInfo*/) {\n\t\t\treturn self.certToPEM(cert);\n\t\t}\n\t};\n\n\tsig.loadSignature(signature);\n\n\treturn sig.checkSignature(xml);\n};\n\nSAML.prototype.getElement = function(parentElement, elementName) {\n\tif (parentElement['saml:' + elementName]) {\n\t\treturn parentElement['saml:' + elementName];\n\t} else if (parentElement['samlp:' + elementName]) {\n\t\treturn parentElement['samlp:' + elementName];\n\t} else if (parentElement['saml2p:' + elementName]) {\n\t\treturn parentElement['saml2p:' + elementName];\n\t} else if (parentElement['saml2:' + elementName]) {\n\t\treturn parentElement['saml2:' + elementName];\n\t}\n\treturn parentElement[elementName];\n};\n\nSAML.prototype.validateLogoutResponse = function(samlResponse, callback) {\n\tvar self = this;\n\n\tvar compressedSAMLResponse = new Buffer(samlResponse, 'base64');\n\tzlib.inflateRaw(compressedSAMLResponse, function(err, decoded) {\n\n\t\tif (err) {\n\t\t\tif (Meteor.settings.debug) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t} else {\n\t\t\tvar parser = new xml2js.Parser({\n\t\t\t\texplicitRoot: true\n\t\t\t});\n\t\t\tparser.parseString(decoded, function(err, doc) {\n\t\t\t\tvar response = self.getElement(doc, 'LogoutResponse');\n\n\t\t\t\tif (response) {\n\t\t\t\t\t// TBD. Check if this msg corresponds to one we sent\n\t\t\t\t\tvar inResponseTo = response.$.InResponseTo;\n\t\t\t\t\tif (Meteor.settings.debug) {\n\t\t\t\t\t\tconsole.log('In Response to: ' + inResponseTo);\n\t\t\t\t\t}\n\t\t\t\t\tvar status = self.getElement(response, 'Status');\n\t\t\t\t\tvar statusCode = self.getElement(status[0], 'StatusCode')[0].$.Value;\n\t\t\t\t\tif (Meteor.settings.debug) {\n\t\t\t\t\t\tconsole.log('StatusCode: ' + JSON.stringify(statusCode));\n\t\t\t\t\t}\n\t\t\t\t\tif (statusCode === 'urn:oasis:names:tc:SAML:2.0:status:Success') {\n\t\t\t\t\t\t// In case of a successful logout at IDP we return inResponseTo value.\n\t\t\t\t\t\t// This is the only way how we can identify the Meteor user (as we don't use Session Cookies)\n\t\t\t\t\t\tcallback(null, inResponseTo);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback('Error. Logout not confirmed by IDP', null);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcallback('No Response Found', null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t});\n};\n\nSAML.prototype.validateResponse = function(samlResponse, relayState, callback) {\n\tvar self = this;\n\tvar xml = new Buffer(samlResponse, 'base64').toString('ascii');\n\t// We currently use RelayState to save SAML provider\n\tif (Meteor.settings.debug) {\n\t\tconsole.log('Validating response with relay state: ' + xml);\n\t}\n\tvar parser = new xml2js.Parser({\n\t\texplicitRoot: true\n\t});\n\n\tparser.parseString(xml, function(err, doc) {\n\t\t// Verify signature\n\t\tif (Meteor.settings.debug) {\n\t\t\tconsole.log('Verify signature');\n\t\t}\n\t\tif (self.options.cert && !self.validateSignature(xml, self.options.cert)) {\n\t\t\tif (Meteor.settings.debug) {\n\t\t\t\tconsole.log('Signature WRONG');\n\t\t\t}\n\t\t\treturn callback(new Error('Invalid signature'), null, false);\n\t\t}\n\t\tif (Meteor.settings.debug) {\n\t\t\tconsole.log('Signature OK');\n\t\t}\n\t\tvar response = self.getElement(doc, 'Response');\n\t\tif (Meteor.settings.debug) {\n\t\t\tconsole.log('Got response');\n\t\t}\n\t\tif (response) {\n\t\t\tvar assertion = self.getElement(response, 'Assertion');\n\t\t\tif (!assertion) {\n\t\t\t\treturn callback(new Error('Missing SAML assertion'), null, false);\n\t\t\t}\n\n\t\t\tvar profile = {};\n\n\t\t\tif (response.$ && response.$.InResponseTo) {\n\t\t\t\tprofile.inResponseToId = response.$.InResponseTo;\n\t\t\t}\n\n\t\t\tvar issuer = self.getElement(assertion[0], 'Issuer');\n\t\t\tif (issuer) {\n\t\t\t\tprofile.issuer = issuer[0];\n\t\t\t}\n\n\t\t\tvar subject = self.getElement(assertion[0], 'Subject');\n\n\t\t\tif (subject) {\n\t\t\t\tvar nameID = self.getElement(subject[0], 'NameID');\n\t\t\t\tif (nameID) {\n\t\t\t\t\tprofile.nameID = nameID[0]._;\n\n\t\t\t\t\tif (nameID[0].$.Format) {\n\t\t\t\t\t\tprofile.nameIDFormat = nameID[0].$.Format;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar authnStatement = self.getElement(assertion[0], 'AuthnStatement');\n\n\t\t\tif (authnStatement) {\n\t\t\t\tif (authnStatement[0].$.SessionIndex) {\n\n\t\t\t\t\tprofile.sessionIndex = authnStatement[0].$.SessionIndex;\n\t\t\t\t\tif (Meteor.settings.debug) {\n\t\t\t\t\t\tconsole.log('Session Index: ' + profile.sessionIndex);\n\t\t\t\t\t}\n\t\t\t\t} else if (Meteor.settings.debug) {\n\t\t\t\t\tconsole.log('No Session Index Found');\n\t\t\t\t}\n\n\n\t\t\t} else if (Meteor.settings.debug) {\n\t\t\t\tconsole.log('No AuthN Statement found');\n\t\t\t}\n\n\t\t\tvar attributeStatement = self.getElement(assertion[0], 'AttributeStatement');\n\t\t\tif (attributeStatement) {\n\t\t\t\tvar attributes = self.getElement(attributeStatement[0], 'Attribute');\n\n\t\t\t\tif (attributes) {\n\t\t\t\t\tattributes.forEach(function(attribute) {\n\t\t\t\t\t\tvar value = self.getElement(attribute, 'AttributeValue');\n\t\t\t\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\t\t\t\tprofile[attribute.$.Name] = value[0];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprofile[attribute.$.Name] = value[0]._;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (!profile.mail && profile['urn:oid:0.9.2342.19200300.100.1.3']) {\n\t\t\t\t\t// See http://www.incommonfederation.org/attributesummary.html for definition of attribute OIDs\n\t\t\t\t\tprofile.mail = profile['urn:oid:0.9.2342.19200300.100.1.3'];\n\t\t\t\t}\n\n\t\t\t\tif (!profile.email && profile.mail) {\n\t\t\t\t\tprofile.email = profile.mail;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!profile.email && profile.nameID && profile.nameIDFormat && profile.nameIDFormat.indexOf('emailAddress') >= 0) {\n\t\t\t\tprofile.email = profile.nameID;\n\t\t\t}\n\t\t\tif (Meteor.settings.debug) {\n\t\t\t\tconsole.log('NameID: ' + JSON.stringify(profile));\n\t\t\t}\n\n\t\t\tcallback(null, profile, false);\n\t\t} else {\n\t\t\tvar logoutResponse = self.getElement(doc, 'LogoutResponse');\n\n\t\t\tif (logoutResponse) {\n\t\t\t\tcallback(null, null, true);\n\t\t\t} else {\n\t\t\t\treturn callback(new Error('Unknown SAML response message'), null, false);\n\t\t\t}\n\n\t\t}\n\t});\n};\n\nvar decryptionCert;\nSAML.prototype.generateServiceProviderMetadata = function(callbackUrl) {\n\n\tvar keyDescriptor = null;\n\n\tif (!decryptionCert) {\n\t\tdecryptionCert = this.options.privateCert;\n\t}\n\n\tif (this.options.privateKey) {\n\t\tif (!decryptionCert) {\n\t\t\tthrow new Error(\n\t\t\t\t'Missing decryptionCert while generating metadata for decrypting service provider');\n\t\t}\n\n\t\tdecryptionCert = decryptionCert.replace(/-+BEGIN CERTIFICATE-+\\r?\\n?/, '');\n\t\tdecryptionCert = decryptionCert.replace(/-+END CERTIFICATE-+\\r?\\n?/, '');\n\t\tdecryptionCert = decryptionCert.replace(/\\r\\n/g, '\\n');\n\n\t\tkeyDescriptor = {\n\t\t\t'ds:KeyInfo': {\n\t\t\t\t'ds:X509Data': {\n\t\t\t\t\t'ds:X509Certificate': {\n\t\t\t\t\t\t'#text': decryptionCert\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t'#list': [\n\t\t\t\t// this should be the set that the xmlenc library supports\n\t\t\t\t{\n\t\t\t\t\t'EncryptionMethod': {\n\t\t\t\t\t\t'@Algorithm': 'http://www.w3.org/2001/04/xmlenc#aes256-cbc'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'EncryptionMethod': {\n\t\t\t\t\t\t'@Algorithm': 'http://www.w3.org/2001/04/xmlenc#aes128-cbc'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'EncryptionMethod': {\n\t\t\t\t\t\t'@Algorithm': 'http://www.w3.org/2001/04/xmlenc#tripledes-cbc'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n\n\tif (!this.options.callbackUrl && !callbackUrl) {\n\t\tthrow new Error(\n\t\t\t'Unable to generate service provider metadata when callbackUrl option is not set');\n\t}\n\n\tvar metadata = {\n\t\t'EntityDescriptor': {\n\t\t\t'@xmlns': 'urn:oasis:names:tc:SAML:2.0:metadata',\n\t\t\t'@xmlns:ds': 'http://www.w3.org/2000/09/xmldsig#',\n\t\t\t'@entityID': this.options.issuer,\n\t\t\t'SPSSODescriptor': {\n\t\t\t\t'@protocolSupportEnumeration': 'urn:oasis:names:tc:SAML:2.0:protocol',\n\t\t\t\t'KeyDescriptor': keyDescriptor,\n\t\t\t\t'SingleLogoutService': {\n\t\t\t\t\t'@Binding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n\t\t\t\t\t'@Location': Meteor.absoluteUrl() + '_saml/logout/' + this.options.provider + '/',\n\t\t\t\t\t'@ResponseLocation': Meteor.absoluteUrl() + '_saml/logout/' + this.options.provider + '/'\n\t\t\t\t},\n\t\t\t\t'NameIDFormat': this.options.identifierFormat,\n\t\t\t\t'AssertionConsumerService': {\n\t\t\t\t\t'@index': '1',\n\t\t\t\t\t'@isDefault': 'true',\n\t\t\t\t\t'@Binding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\n\t\t\t\t\t'@Location': callbackUrl\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\treturn xmlbuilder.create(metadata).end({\n\t\tpretty: true,\n\t\tindent: '  ',\n\t\tnewline: '\\n'\n\t});\n};\n","logger = new Logger 'steffo:meteor-accounts-saml',\n\tmethods:\n\t\tupdated:\n\t\t\ttype: 'info'\n\nRocketChat.settings.addGroup 'SAML'\nMeteor.methods\n\taddSamlService: (name) ->\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}\"                   , false                                                         , { type: 'boolean', group: 'SAML', section: name, i18nLabel: 'Accounts_OAuth_Custom_Enable'}\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}_provider\"          , 'openidp'                                                     , { type: 'string' , group: 'SAML', section: name, i18nLabel: 'SAML_Custom_Provider'}\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}_entry_point\"       , 'https://openidp.feide.no/simplesaml/saml2/idp/SSOService.php', { type: 'string' , group: 'SAML', section: name, i18nLabel: 'SAML_Custom_Entry_point'}\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}_issuer\"            , 'https://rocket.chat/'                                        , { type: 'string' , group: 'SAML', section: name, i18nLabel: 'SAML_Custom_Issuer'}\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}_cert\"              , ''                                                            , { type: 'string' , group: 'SAML', section: name, i18nLabel: 'SAML_Custom_Cert'}\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}_button_label_text\" , ''                                                            , { type: 'string' , group: 'SAML', section: name, i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Text'}\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}_button_label_color\", '#FFFFFF'                                                     , { type: 'string' , group: 'SAML', section: name, i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Color'}\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}_button_color\"      , '#13679A'                                                     , { type: 'string' , group: 'SAML', section: name, i18nLabel: 'Accounts_OAuth_Custom_Button_Color'}\n\t\tRocketChat.settings.add \"SAML_Custom_#{name}_generate_username\" , false                                                         , { type: 'boolean', group: 'SAML', section: name, i18nLabel: 'SAML_Custom_Generate_Username'}\n\ntimer = undefined\nupdateServices = ->\n\tMeteor.clearTimeout timer if timer?\n\n\ttimer = Meteor.setTimeout ->\n\t\tservices = RocketChat.models.Settings.find({_id: /^(SAML_Custom_)[a-z]+$/i}).fetch()\n\n\t\tAccounts.saml.settings.providers = []\n\n\t\tfor service in services\n\t\t\tlogger.updated service._id\n\n\t\t\tserviceName = 'saml'\n\n\t\t\tif service.value is true\n\t\t\t\tdata =\n\t\t\t\t\tbuttonLabelText: RocketChat.models.Settings.findOneById(\"#{service._id}_button_label_text\")?.value\n\t\t\t\t\tbuttonLabelColor: RocketChat.models.Settings.findOneById(\"#{service._id}_button_label_color\")?.value\n\t\t\t\t\tbuttonColor: RocketChat.models.Settings.findOneById(\"#{service._id}_button_color\")?.value\n\t\t\t\t\tclientConfig:\n\t\t\t\t\t\tprovider: RocketChat.models.Settings.findOneById(\"#{service._id}_provider\")?.value\n\n\t\t\t\tAccounts.saml.settings.generateUsername = RocketChat.models.Settings.findOneById(\"#{service._id}_generate_username\")?.value\n\n\t\t\t\tAccounts.saml.settings.providers.push\n\t\t\t\t\tprovider: data.clientConfig.provider\n\t\t\t\t\tentryPoint: RocketChat.models.Settings.findOneById(\"#{service._id}_entry_point\")?.value\n\t\t\t\t\tissuer: RocketChat.models.Settings.findOneById(\"#{service._id}_issuer\")?.value\n\t\t\t\t\tcert: RocketChat.models.Settings.findOneById(\"#{service._id}_cert\")?.value\n\n\t\t\t\tServiceConfiguration.configurations.upsert {service: serviceName.toLowerCase()}, $set: data\n\t\t\telse\n\t\t\t\tServiceConfiguration.configurations.remove {service: serviceName.toLowerCase()}\n\t, 2000\n\nRocketChat.models.Settings.find().observe\n\tadded: (record) ->\n\t\tif /^SAML_.+/.test record._id\n\t\t\tupdateServices()\n\n\tchanged: (record) ->\n\t\tif /^SAML_.+/.test record._id\n\t\t\tupdateServices()\n\n\tremoved: (record) ->\n\t\tif /^SAML_.+/.test record._id\n\t\t\tupdateServices()\n\nMeteor.startup ->\n\tif not RocketChat.models.Settings.findOne({_id: /^(SAML_Custom)[a-z]+$/i})?\n\t\tMeteor.call 'addSamlService', 'Default'\n"]}